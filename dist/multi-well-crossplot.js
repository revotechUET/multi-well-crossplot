/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../bower_components/regression-js/dist/regression.min.js":
/*!****************************************************************!*\
  !*** ../bower_components/regression-js/dist/regression.min.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(global,factory){if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))}else { var mod; }})(this,function(module){\"use strict\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i]}return arr2}else{return Array.from(arr)}}var DEFAULT_OPTIONS={order:2,precision:2,period:null};function determinationCoefficient(data,results){var predictions=[];var observations=[];data.forEach(function(d,i){if(d[1]!==null){observations.push(d);predictions.push(results[i])}});var sum=observations.reduce(function(a,observation){return a+observation[1]},0);var mean=sum/observations.length;var ssyy=observations.reduce(function(a,observation){var difference=observation[1]-mean;return a+difference*difference},0);var sse=observations.reduce(function(accum,observation,index){var prediction=predictions[index];var residual=observation[1]-prediction[1];return accum+residual*residual},0);return 1-sse/ssyy}function gaussianElimination(input,order){var matrix=input;var n=input.length-1;var coefficients=[order];for(var i=0;i<n;i++){var maxrow=i;for(var j=i+1;j<n;j++){if(Math.abs(matrix[i][j])>Math.abs(matrix[i][maxrow])){maxrow=j}}for(var k=i;k<n+1;k++){var tmp=matrix[k][i];matrix[k][i]=matrix[k][maxrow];matrix[k][maxrow]=tmp}for(var _j=i+1;_j<n;_j++){for(var _k=n;_k>=i;_k--){matrix[_k][_j]-=matrix[_k][i]*matrix[i][_j]/matrix[i][i]}}}for(var _j2=n-1;_j2>=0;_j2--){var total=0;for(var _k2=_j2+1;_k2<n;_k2++){total+=matrix[_k2][_j2]*coefficients[_k2]}coefficients[_j2]=(matrix[n][_j2]-total)/matrix[_j2][_j2]}return coefficients}function round(number,precision){var factor=Math.pow(10,precision);return Math.round(number*factor)/factor}var methods={linear:function linear(data,options){var sum=[0,0,0,0,0];var len=0;for(var n=0;n<data.length;n++){if(data[n][1]!==null){len++;sum[0]+=data[n][0];sum[1]+=data[n][1];sum[2]+=data[n][0]*data[n][0];sum[3]+=data[n][0]*data[n][1];sum[4]+=data[n][1]*data[n][1]}}var run=len*sum[2]-sum[0]*sum[0];var rise=len*sum[3]-sum[0]*sum[1];var gradient=run===0?0:round(rise/run,options.precision);var intercept=round(sum[1]/len-gradient*sum[0]/len,options.precision);var predict=function predict(x){return[round(x,options.precision),round(gradient*x+intercept,options.precision)]};var points=data.map(function(point){return predict(point[0])});return{points:points,predict:predict,equation:[gradient,intercept],r2:round(determinationCoefficient(data,points),options.precision),string:intercept===0?\"y = \"+gradient+\"x\":\"y = \"+gradient+\"x + \"+intercept}},exponential:function exponential(data,options){var sum=[0,0,0,0,0,0];for(var n=0;n<data.length;n++){if(data[n][1]!==null){sum[0]+=data[n][0];sum[1]+=data[n][1];sum[2]+=data[n][0]*data[n][0]*data[n][1];sum[3]+=data[n][1]*Math.log(data[n][1]);sum[4]+=data[n][0]*data[n][1]*Math.log(data[n][1]);sum[5]+=data[n][0]*data[n][1]}}var denominator=sum[1]*sum[2]-sum[5]*sum[5];var a=Math.exp((sum[2]*sum[3]-sum[5]*sum[4])/denominator);var b=(sum[1]*sum[4]-sum[5]*sum[3])/denominator;var coeffA=round(a,options.precision);var coeffB=round(b,options.precision);var predict=function predict(x){return[round(x,options.precision),round(coeffA*Math.exp(coeffB*x),options.precision)]};var points=data.map(function(point){return predict(point[0])});return{points:points,predict:predict,equation:[coeffA,coeffB],string:\"y = \"+coeffA+\"e^(\"+coeffB+\"x)\",r2:round(determinationCoefficient(data,points),options.precision)}},logarithmic:function logarithmic(data,options){var sum=[0,0,0,0];var len=data.length;for(var n=0;n<len;n++){if(data[n][1]!==null){sum[0]+=Math.log(data[n][0]);sum[1]+=data[n][1]*Math.log(data[n][0]);sum[2]+=data[n][1];sum[3]+=Math.pow(Math.log(data[n][0]),2)}}var a=(len*sum[1]-sum[2]*sum[0])/(len*sum[3]-sum[0]*sum[0]);var coeffB=round(a,options.precision);var coeffA=round((sum[2]-coeffB*sum[0])/len,options.precision);var predict=function predict(x){return[round(x,options.precision),round(round(coeffA+coeffB*Math.log(x),options.precision),options.precision)]};var points=data.map(function(point){return predict(point[0])});return{points:points,predict:predict,equation:[coeffA,coeffB],string:\"y = \"+coeffA+\" + \"+coeffB+\" ln(x)\",r2:round(determinationCoefficient(data,points),options.precision)}},power:function power(data,options){var sum=[0,0,0,0,0];var len=data.length;for(var n=0;n<len;n++){if(data[n][1]!==null){sum[0]+=Math.log(data[n][0]);sum[1]+=Math.log(data[n][1])*Math.log(data[n][0]);sum[2]+=Math.log(data[n][1]);sum[3]+=Math.pow(Math.log(data[n][0]),2)}}var b=(len*sum[1]-sum[0]*sum[2])/(len*sum[3]-Math.pow(sum[0],2));var a=(sum[2]-b*sum[0])/len;var coeffA=round(Math.exp(a),options.precision);var coeffB=round(b,options.precision);var predict=function predict(x){return[round(x,options.precision),round(round(coeffA*Math.pow(x,coeffB),options.precision),options.precision)]};var points=data.map(function(point){return predict(point[0])});return{points:points,predict:predict,equation:[coeffA,coeffB],string:\"y = \"+coeffA+\"x^\"+coeffB,r2:round(determinationCoefficient(data,points),options.precision)}},polynomial:function polynomial(data,options){var lhs=[];var rhs=[];var a=0;var b=0;var len=data.length;var k=options.order+1;for(var i=0;i<k;i++){for(var l=0;l<len;l++){if(data[l][1]!==null){a+=Math.pow(data[l][0],i)*data[l][1]}}lhs.push(a);a=0;var c=[];for(var j=0;j<k;j++){for(var _l=0;_l<len;_l++){if(data[_l][1]!==null){b+=Math.pow(data[_l][0],i+j)}}c.push(b);b=0}rhs.push(c)}rhs.push(lhs);var coefficients=gaussianElimination(rhs,k).map(function(v){return round(v,options.precision)});var predict=function predict(x){return[round(x,options.precision),round(coefficients.reduce(function(sum,coeff,power){return sum+coeff*Math.pow(x,power)},0),options.precision)]};var points=data.map(function(point){return predict(point[0])});var string=\"y = \";for(var _i=coefficients.length-1;_i>=0;_i--){if(_i>1){string+=coefficients[_i]+\"x^\"+_i+\" + \"}else if(_i===1){string+=coefficients[_i]+\"x + \"}else{string+=coefficients[_i]}}return{string:string,points:points,predict:predict,equation:[].concat(_toConsumableArray(coefficients)).reverse(),r2:round(determinationCoefficient(data,points),options.precision)}}};function createWrapper(){var reduce=function reduce(accumulator,name){return _extends({_round:round},accumulator,_defineProperty({},name,function(data,supplied){return methods[name](data,_extends({},DEFAULT_OPTIONS,supplied))}))};return Object.keys(methods).reduce(reduce,{})}module.exports=createWrapper()});\n\n//# sourceURL=webpack:///../bower_components/regression-js/dist/regression.min.js?");

/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-crossplot/style.less":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-crossplot/style.less ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \"multi-crossplot {\\n  display: flex;\\n  height: 100%;\\n  flex-direction: column;\\n}\\nmulti-crossplot multi-well-crossplot {\\n  height: 100%;\\n  width: 100%;\\n}\\nmulti-crossplot input,\\nmulti-crossplot select {\\n  box-shadow: none;\\n}\\nmulti-crossplot ::-webkit-scrollbar-button:horizontal:increment {\\n  /* Right */\\n  background-image: none;\\n}\\nmulti-crossplot ::-webkit-scrollbar-button:horizontal:decrement {\\n  /* Left */\\n  background-image: none;\\n}\\nmulti-crossplot ::-webkit-scrollbar-button:vertical:increment {\\n  /* Down */\\n  background-image: none;\\n}\\nmulti-crossplot ::-webkit-scrollbar-button:vertical:decrement {\\n  /* Up */\\n  background-image: none;\\n}\\nmulti-crossplot .ui-select-match-text {\\n  text-align: right;\\n}\\nmulti-crossplot button.disable {\\n  color: #aaa;\\n  border-color: #aaa;\\n}\\nmulti-crossplot .main {\\n  display: flex;\\n  height: 100%;\\n  flex-direction: row;\\n}\\nmulti-crossplot ::-webkit-scrollbar {\\n  background: #f4f4f4;\\n  width: 5px;\\n  height: 5px;\\n}\\nmulti-crossplot ::-webkit-scrollbar-thumb {\\n  background-color: #dcdcdc;\\n}\\nmulti-crossplot .tab {\\n  display: flex;\\n  z-index: 1;\\n  color: #000;\\n  background: #fff;\\n  flex-basis: 40px;\\n}\\nmulti-crossplot .tab .tab-name {\\n  display: flex;\\n  align-items: center;\\n  padding: 11px 20px;\\n  cursor: pointer;\\n  transition: all 0.2s ease-in;\\n  border-right: 1px solid #d9d9d9;\\n  border-bottom: 2px solid #fff;\\n}\\nmulti-crossplot .tab .tab-name:hover {\\n  background: #fff;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-crossplot .tab .tab-drop {\\n  display: flex;\\n  align-items: center;\\n  padding: 11px 20px;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-crossplot .tab .active {\\n  color: #0077be;\\n  background: #fff;\\n  border-bottom: 2px solid #0077be;\\n}\\nmulti-crossplot .warning {\\n  display: none;\\n}\\nmulti-crossplot .show-warning {\\n  display: flex !important;\\n  align-items: center;\\n  background: #f47a7a;\\n  padding: 10px;\\n  height: 26px;\\n  color: #fff;\\n  border-radius: 2px;\\n  margin-top: 7px;\\n}\\n\", \"\"]);\n\n\n\n//# sourceURL=webpack:///./multi-crossplot/style.less?../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js");

/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-well-crossplot/style.less":
/*!************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-well-crossplot/style.less ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \"multi-well-crossplot {\\n  /* Rounded sliders */\\n  /* change style special of wi-base-treeview for basemap */\\n}\\nmulti-well-crossplot .rg-bottom span,\\nmulti-well-crossplot .rg-top span {\\n  margin: 3px 0 0 -10px;\\n}\\nmulti-well-crossplot .axis-info {\\n  display: flex;\\n  padding: 15px;\\n  flex-direction: column;\\n  border-bottom: 1px solid #ccc;\\n}\\nmulti-well-crossplot .axis-info .axis-Z {\\n  flex: 1;\\n  display: flex;\\n  margin-bottom: 15px;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .line {\\n  border-bottom: 2px solid #8e8e8e;\\n  position: absolute;\\n  width: calc(100% - 15px);\\n  margin-top: 10px;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .axis {\\n  border: 1px solid #cccccc;\\n  color: #646464;\\n  background: #f4f4f4;\\n  font-size: 12px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  margin-right: 15px;\\n  border-radius: 2px;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .ellipsis-text {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .label {\\n  padding: 0 10px;\\n  font-weight: bold;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .axis-type {\\n  width: 100px;\\n  color: #0077be;\\n  height: 22px;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .axis-min {\\n  width: 40px;\\n  color: #0077be;\\n  margin-right: -1px;\\n  height: 22px;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .axis-line {\\n  flex: 1;\\n  margin-right: -1px;\\n  background: #fff;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .axis-max {\\n  width: 80px;\\n  color: #0077be;\\n  height: 22px;\\n}\\nmulti-well-crossplot .red-color {\\n  color: #cc6d6d;\\n}\\nmulti-well-crossplot .blue-color {\\n  color: #0077be;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar-button:horizontal:increment {\\n  /* Right */\\n  background-image: none;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar-button:horizontal:decrement {\\n  /* Left */\\n  background-image: none;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar-button:vertical:increment {\\n  /* Down */\\n  background-image: none;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar-button:vertical:decrement {\\n  /* Up */\\n  background-image: none;\\n}\\nmulti-well-crossplot .disable-node-caret .node-caret {\\n  display: none;\\n}\\nmulti-well-crossplot .switch-label {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n  color: #666;\\n  font-size: 12px;\\n}\\nmulti-well-crossplot .switch-label > label {\\n  margin-bottom: 0;\\n}\\nmulti-well-crossplot .switch {\\n  position: relative;\\n  display: inline-block;\\n  width: 35px;\\n  height: 16px;\\n  margin-left: 10px;\\n}\\nmulti-well-crossplot .switch input {\\n  opacity: 0;\\n  width: 0;\\n  height: 0;\\n}\\nmulti-well-crossplot .slider {\\n  position: absolute;\\n  cursor: pointer;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  background-color: #ccc;\\n  -webkit-transition: 0.2s;\\n  transition: 0.2s;\\n}\\nmulti-well-crossplot .slider:before {\\n  position: absolute;\\n  content: \\\"\\\";\\n  height: 10px;\\n  width: 10px;\\n  left: 3px;\\n  bottom: 3px;\\n  background-color: white;\\n  -webkit-transition: 0.2s;\\n  transition: 0.2s;\\n}\\nmulti-well-crossplot input:checked + .slider {\\n  background-color: #2196F3;\\n}\\nmulti-well-crossplot input:focus + .slider {\\n  box-shadow: 0 0 1px #2196F3;\\n}\\nmulti-well-crossplot input:checked + .slider:before {\\n  -webkit-transform: translateX(18px);\\n  -ms-transform: translateX(18px);\\n  transform: translateX(18px);\\n}\\nmulti-well-crossplot .slider.round {\\n  border-radius: 34px;\\n}\\nmulti-well-crossplot .slider.round:before {\\n  border-radius: 50%;\\n}\\nmulti-well-crossplot wi-tree-view div input,\\nmulti-well-crossplot wi-tree-view-virtual div input {\\n  width: 100%;\\n  line-height: 1.4;\\n  padding: 10px 10px 10px 14px;\\n  border: none;\\n  border-bottom: 1px solid #f0f0f0;\\n  outline: none;\\n  box-sizing: border-box;\\n}\\nmulti-well-crossplot wi-tree-view div input::placeholder,\\nmulti-well-crossplot wi-tree-view-virtual div input::placeholder {\\n  color: #cecece;\\n}\\nmulti-well-crossplot wi-table-view div.cell {\\n  display: table-cell;\\n  padding: 7px 10px;\\n  border-right: 1px solid #d4d4d4;\\n  border-bottom: 1px solid #d4d4d4;\\n  cursor: default;\\n  position: relative;\\n  border-top: none;\\n  border-left: none;\\n}\\nmulti-well-crossplot wi-table-view div.table {\\n  margin-top: 0;\\n  border-radius: 2px;\\n  border-top: 1px solid #ccc;\\n  border-left: 1px solid #ccc;\\n  border-bottom: none;\\n  border-right: none;\\n}\\nmulti-well-crossplot editable div.my-content {\\n  float: left;\\n  color: #a9a9a9;\\n}\\nmulti-well-crossplot wi-dropdown-list:focus {\\n  outline: none !important;\\n}\\nmulti-well-crossplot wi-dropdown-list .ui-select-bootstrap > .ui-select-match > .btn {\\n  border: none;\\n  box-shadow: none;\\n  outline: none;\\n  display: flex;\\n  align-items: center;\\n  font-size: 12px;\\n}\\nmulti-well-crossplot wi-dropdown-list .btn-default:active:focus {\\n  background-color: #fff;\\n}\\nmulti-well-crossplot wi-dropdown-list .btn-default.active,\\nmulti-well-crossplot wi-dropdown-list .btn-default:active,\\nmulti-well-crossplot wi-dropdown-list .open > .dropdown-toggle.btn-default {\\n  color: #333;\\n  background-color: #fff;\\n  background-image: none;\\n  border-color: #adadad;\\n}\\nmulti-well-crossplot wi-dropdown-list .btn-default.focus,\\nmulti-well-crossplot wi-dropdown-list .btn-default:focus {\\n  color: #333;\\n  background-color: #fff;\\n  border-color: #fff;\\n}\\nmulti-well-crossplot wi-dropdown-list .form-control {\\n  border: none;\\n}\\nmulti-well-crossplot wi-dropdown-list :focus {\\n  outline: none;\\n}\\nmulti-well-crossplot wi-dropdown-list .form-control:focus {\\n  border: none;\\n  box-shadow: none;\\n}\\nmulti-well-crossplot wi-dropdown-list .btn-default:hover {\\n  color: #333;\\n  background-color: #fff;\\n  border-color: #fff;\\n}\\nmulti-well-crossplot side-bar > div div.content {\\n  overflow-x: hidden;\\n  height: 100%;\\n  display: flex;\\n  overflow-y: auto;\\n  /* padding-left: 15px; */\\n  flex-direction: row;\\n}\\nmulti-well-crossplot wi-droppable {\\n  height: 100%;\\n}\\nmulti-well-crossplot wi-tree-node .node-caret,\\nmulti-well-crossplot wi-tree-node .node-label,\\nmulti-well-crossplot wi-tree-node .node-icon {\\n  display: flex;\\n  padding-right: 10px;\\n  font-size: 12px;\\n}\\nmulti-well-crossplot wi-tree-node .node-caret {\\n  color: #cccbcb;\\n  font-size: 14px;\\n  cursor: pointer;\\n  width: 16px;\\n}\\nmulti-well-crossplot wi-tree-node .node-content.search-mode > div {\\n  opacity: 1;\\n}\\nmulti-well-crossplot wi-tree-node .node-content,\\nmulti-well-crossplot wi-tree-node .node-content::after {\\n  line-height: 3em;\\n}\\nmulti-well-crossplot .ui-select-match-text {\\n  text-align: right;\\n}\\nmulti-well-crossplot button.disable {\\n  color: #aaa;\\n  border-color: #aaa;\\n}\\nmulti-well-crossplot .fn-button {\\n  border: 1px solid #d9d9d9;\\n  font-size: 10px;\\n  border-radius: 2px;\\n  background: #fff;\\n  padding: 6px 12px 5px 12px;\\n  margin-right: 15px;\\n  line-height: 1;\\n  font-weight: bold;\\n  cursor: pointer;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .fn-button:hover {\\n  transition: all 0.2s ease-in;\\n  border: 1px solid #1962a7;\\n  color: #1962a7;\\n  background: #fff;\\n}\\nmulti-well-crossplot .main {\\n  display: flex;\\n  height: 100%;\\n  flex-direction: row;\\n}\\nmulti-well-crossplot .main .main-toolbar {\\n  flex-basis: 44px;\\n  background: #0074c5;\\n  display: flex;\\n  align-items: center;\\n  position: relative;\\n}\\nmulti-well-crossplot .main .main-toolbar .menu-item {\\n  margin: 0 15px;\\n  color: #fff;\\n  display: flex;\\n  align-items: center;\\n  cursor: pointer;\\n}\\nmulti-well-crossplot .main .main-toolbar .menu-item .select-proj4 {\\n  box-shadow: none;\\n  border: none;\\n  border-radius: 0;\\n  font-size: 12px;\\n  color: #fff;\\n  background: none;\\n}\\nmulti-well-crossplot .main .main-toolbar .menu-item .select-proj4:focus {\\n  border-color: none;\\n  outline: none;\\n  -webkit-box-shadow: none;\\n  box-shadow: none;\\n}\\nmulti-well-crossplot .main .statistic-table {\\n  flex-basis: 200px;\\n  margin: 15px 15px;\\n  position: relative;\\n  height: 20%;\\n  max-height: 64%;\\n}\\nmulti-well-crossplot .main .main-body {\\n  width: 100%;\\n  display: flex;\\n  overflow-x: auto;\\n  overflow-y: hidden;\\n  position: relative;\\n  flex-direction: column;\\n}\\nmulti-well-crossplot .main .main-body .border-style {\\n  border: 1px solid #eee;\\n  border-top-right-radius: 3px;\\n  border-top-left-radius: 3px;\\n}\\nmulti-well-crossplot .main .main-body .main-body-left {\\n  display: flex;\\n  z-index: 1;\\n  height: calc(100%);\\n}\\nmulti-well-crossplot .main .main-body .main-body-left .input-search-list-view {\\n  background: #fff;\\n  width: 100%;\\n  height: 44px;\\n  border: 1px solid #ffffff4a;\\n  border-bottom: 1px solid #eaeaea;\\n  padding: 10px 20px 10px 15px;\\n  font-weight: bold;\\n}\\nmulti-well-crossplot .main .main-body .main-body-left ::-webkit-input-placeholder {\\n  opacity: 0.5;\\n  color: rgba(0, 0, 0, 0.253);\\n  /* font-weight: 100; */\\n}\\nmulti-well-crossplot .main .main-body .main-body-left :focus::-webkit-input-placeholder {\\n  opacity: 0.5;\\n  color: rgba(0, 0, 0, 0.253);\\n  /* font-weight: 100; */\\n}\\nmulti-well-crossplot .main .main-body .main-body-left .input-search-list-view:focus {\\n  outline: none;\\n}\\nmulti-well-crossplot .main .main-body .main-body-center {\\n  flex: 1;\\n  display: flex;\\n  height: 100%;\\n  position: relative;\\n  flex-direction: column;\\n}\\nmulti-well-crossplot .main .button-update {\\n  background: #0077be;\\n  color: #fff;\\n  font-weight: bold;\\n  flex: 1;\\n  padding: 10px;\\n  text-align: center;\\n  margin: 9px 15px 15px 15px;\\n  border-radius: 2px;\\n  transition: all 0.2s ease-in;\\n  cursor: pointer;\\n}\\nmulti-well-crossplot .main .button-update:hover {\\n  background: #1ba0ec;\\n  transition: all 0.5s;\\n}\\nmulti-well-crossplot .main .disabled-click {\\n  pointer-events: none;\\n  opacity: 0.2;\\n}\\nmulti-well-crossplot .main .label-list-view {\\n  padding: 16px 15px;\\n  font-weight: bold;\\n  background: #fff;\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n  font-weight: 400;\\n  right: 0;\\n  position: sticky;\\n}\\nmulti-well-crossplot .main .label-info-image {\\n  background: #fff;\\n  min-width: 99px;\\n  display: flex;\\n  align-items: center;\\n  border-radius: 3px;\\n  padding: 5px 10px;\\n  margin-right: 15px;\\n  justify-content: space-between;\\n}\\nmulti-well-crossplot .main .button-td {\\n  cursor: pointer;\\n  background: #f4f4f4;\\n  padding: 3px 10px;\\n  border-radius: 2px;\\n  border: 1px solid #e8e8e8;\\n}\\nmulti-well-crossplot .main .button-td:hover {\\n  background: #87c1ff;\\n  color: #fff;\\n}\\nmulti-well-crossplot .main .header-icon {\\n  margin-right: 15px;\\n  cursor: pointer;\\n  width: 10px;\\n}\\nmulti-well-crossplot .main .label-button {\\n  float: right;\\n  font-size: 115%;\\n  color: #bbbbbb;\\n  margin: 2px 5px 0 15px;\\n  pointer-events: none;\\n}\\nmulti-well-crossplot .main .button-with-label-layer {\\n  cursor: pointer;\\n  background: #f4f4f4;\\n  font-size: 10px;\\n  padding: 5px 7px;\\n  margin-left: 5px;\\n  border: 1px solid #e4e4e4;\\n  border-radius: 2px;\\n  flex: 1;\\n  text-align: center;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .button-with-label-layer:hover {\\n  background: #fff;\\n  color: #0077be;\\n  border: 1px solid #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .button-with-label {\\n  cursor: pointer;\\n  background: #f4f4f4;\\n  font-size: 10px;\\n  padding: 5px 10px;\\n  border: 1px solid #f4f4f4;\\n  border-radius: 20px;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .button-with-label:hover {\\n  border: 1px solid #0077be;\\n}\\nmulti-well-crossplot .main .button-with-label.active {\\n  background: #f4f4f4;\\n  color: #0077be;\\n  border: 1px solid #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .tab-with-label {\\n  cursor: pointer;\\n  opacity: 0.3;\\n  transition: all 0.2s ease-in;\\n  transform: rotate(90deg);\\n  margin: 25px 0px;\\n  width: 40px;\\n  white-space: nowrap;\\n  font-weight: bold;\\n}\\nmulti-well-crossplot .main .tab-with-label:hover {\\n  color: #0077be;\\n  opacity: 1;\\n}\\nmulti-well-crossplot .main .tab-with-label.active {\\n  opacity: 1;\\n  color: #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .select-table-header {\\n  border: 1px solid #eee;\\n  background: #f4f4f4;\\n  padding: 5px 8px;\\n  margin: 0 8px 8px 0;\\n  cursor: pointer;\\n  border-radius: 2px;\\n  min-width: 75px;\\n  display: flex;\\n  justify-content: center;\\n}\\nmulti-well-crossplot .main .select-table-header.active {\\n  color: #0077be;\\n  border: 1px solid #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .label-option-sidebar {\\n  font-weight: bold;\\n  font-size: 12px;\\n  color: #646464;\\n  background: #fff;\\n  padding: 15px;\\n}\\nmulti-well-crossplot .main .selection-sidebar {\\n  border: 1px solid #c7c7c7;\\n  border-radius: 2px;\\n  padding: 2px 10px;\\n  align-items: center;\\n  display: flex;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .selection-sidebar:hover {\\n  border: 1px solid #0077be;\\n}\\nmulti-well-crossplot .main .selection-sidebar > input:focus {\\n  outline: none;\\n}\\nmulti-well-crossplot .main .input-suggestions {\\n  margin-left: 10px;\\n  border: none;\\n  flex: 1;\\n  color: #0077be;\\n  text-align: right;\\n}\\nmulti-well-crossplot .axis-bar {\\n  background: #fff;\\n  border-radius: 2px;\\n  border: 1px solid #dbdbdb87;\\n  font-size: 10px;\\n  display: flex;\\n  flex: 1;\\n  align-items: center;\\n  padding: 10px 10px;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .axis-bar:hover {\\n  border: 1px solid #0077be;\\n}\\nmulti-well-crossplot .axis-bar.selected {\\n  font-weight: bold;\\n  color: #0077be;\\n}\\nmulti-well-crossplot .axis-bar::after {\\n  content: \\\"2r\\\";\\n  color: transparent;\\n  display: block;\\n  top: 0;\\n  width: 4px;\\n  right: 0;\\n}\\nmulti-well-crossplot .bottom-add {\\n  background: #f4f4f4;\\n  padding: 10px;\\n  border-radius: 2px;\\n  text-align: center;\\n  margin: 15px 15px 0 15px;\\n  cursor: pointer;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .bottom-add:hover {\\n  background: #e7e7e7;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .list-formular {\\n  padding: 0 5px 0 15px;\\n  margin: 15px;\\n  display: flex;\\n  border-radius: 2px;\\n  border: 1px solid #ddd;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .list-formular:hover {\\n  border: 1px solid #0077be;\\n}\\nmulti-well-crossplot .delete-button {\\n  padding: 10px;\\n  cursor: pointer;\\n  font-size: 15px;\\n  color: #aaa;\\n  align-items: center;\\n  border: none;\\n  display: flex;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar {\\n  background: #fff;\\n  width: 5px;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar-thumb {\\n  background-color: #ccc;\\n}\\nmulti-well-crossplot .fix-header-table {\\n  overflow-y: auto;\\n  display: flex;\\n  flex: 1;\\n}\\nmulti-well-crossplot .fix-header-table th {\\n  position: sticky;\\n  top: 0;\\n}\\nmulti-well-crossplot .rectangle {\\n  border: 0.5px solid #a7a7a7;\\n  width: 12px;\\n  height: 12px;\\n  border-radius: 11px;\\n  background: #0077be;\\n}\\nmulti-well-crossplot table {\\n  border-collapse: collapse;\\n  table-layout: fixed;\\n  width: 100%;\\n  user-select: none;\\n}\\nmulti-well-crossplot table th {\\n  position: sticky;\\n  top: 0;\\n}\\nmulti-well-crossplot thead {\\n  border-bottom: 1px solid #ccc;\\n}\\nmulti-well-crossplot td,\\nmulti-well-crossplot th {\\n  border-bottom: 1px solid #f0f0f0;\\n  border-right: 1px solid #f0f0f0;\\n  padding-top: 10px;\\n  padding-bottom: 9px;\\n  padding-left: 14px;\\n  overflow: hidden;\\n}\\nmulti-well-crossplot tr {\\n  border-right: 4px solid #fff;\\n}\\nmulti-well-crossplot tr.updated {\\n  background-color: #c2eaff70;\\n}\\nmulti-well-crossplot tr.created {\\n  background-color: #abeaab29;\\n}\\nmulti-well-crossplot tr.deleted {\\n  background-color: #f4f4f4;\\n  pointer-events: none;\\n  color: #d8d3d3;\\n}\\nmulti-well-crossplot tr:hover {\\n  border-right: 4px solid #0077be;\\n  background: #f9f9f9;\\n}\\nmulti-well-crossplot th {\\n  padding-top: 9px;\\n  padding-bottom: 10px;\\n  text-align: left;\\n  background-color: #ffffff;\\n  color: #0077be;\\n}\\nmulti-well-crossplot ::placeholder {\\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\\n  color: #9e9e9e;\\n  opacity: 1;\\n  /* Firefox */\\n}\\n\", \"\"]);\n\n\n\n//# sourceURL=webpack:///./multi-well-crossplot/style.less?../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js");

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/api.js":
/*!******************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/api.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return '@media ' + item[2] + '{' + content + '}';\n      } else {\n        return content;\n      }\n    }).join('');\n  }; // import a list of modules into the list\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (i = 0; i < modules.length; i++) {\n      var item = modules[i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || '';\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n  return '/*# ' + data + ' */';\n}\n\n//# sourceURL=webpack:///../node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "../node_modules/style-loader/lib/addStyles.js":
/*!*****************************************************!*\
  !*** ../node_modules/style-loader/lib/addStyles.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(/*! ./urls */ \"../node_modules/style-loader/lib/urls.js\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (false) {}\n\n\treturn __webpack_require__.nc;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === 'function'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n\n//# sourceURL=webpack:///../node_modules/style-loader/lib/addStyles.js?");

/***/ }),

/***/ "../node_modules/style-loader/lib/urls.js":
/*!************************************************!*\
  !*** ../node_modules/style-loader/lib/urls.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n\n//# sourceURL=webpack:///../node_modules/style-loader/lib/urls.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = {\n    multiWellCrossplot: __webpack_require__(/*! ./multi-well-crossplot */ \"./multi-well-crossplot/index.js\"),\n    multiCrossplot: __webpack_require__(/*! ./multi-crossplot */ \"./multi-crossplot/index.js\")\n}\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./multi-crossplot/index.js":
/*!**********************************!*\
  !*** ./multi-crossplot/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var componentName = 'multiCrossplot';\nmodule.exports.name = componentName;\n__webpack_require__(/*! ./style.less */ \"./multi-crossplot/style.less\");\n\nvar app = angular.module(componentName, ['multiWellCrossplot','wiLoading']);\napp.component(componentName, {\n    template: __webpack_require__(/*! ./template.html */ \"./multi-crossplot/template.html\"),\n    controller: multiCrossplotController,\n    controllerAs: 'self',\n    bindings: {\n        token: \"<\",\n        idProject: \"<\",\n        wellSpecs: \"=\",\n        zonesetNames: \"<\",\n        selectionTypes: \"<\",\n        selectionXValues: \"<\",\n        selectionYValues: \"<\",\n        selectionZ1Values: \"<\",\n        selectionZ2Values: \"<\",\n        selectionZ3Values: \"<\",\n\t\tidHistograms: \"<\",\n\t\tconfigs: '<',\n        onSave: '<',\n        onSaveAs: '<',\n\t\ttitles: '<'\n    },\n    transclude: true\n});\n\nfunction multiCrossplotController($scope, $timeout, $element, wiToken, wiApi, wiDialog, wiLoading) {\n    let self = this;\n    self.silent = true;\n    $scope.tabIndex = 0;\n\n    this.$onInit = async function () {\n        if (self.token)\n            wiToken.setToken(self.token);\n    }\n    self.activateTab = function ($index){\n        $timeout(()=>{\n            $scope.tabIndex = $index;\n        })\n\n    }\n    this.onDrop = function (event, helper, myData) {\n        let idCurves = helper.data(\"idCurves\");\n        let selectionXValue;\n        let idWell;\n        if(idCurves && idCurves.length >= 2){\n            $timeout(()=>{\n                self.warning = false;\n            })\n            wiApi.getCurveInfoPromise(idCurves[0]).then(curveInfo => {\n                selectionXValue = curveInfo.name;\n                return wiApi.getDatasetInfoPromise(curveInfo.idDataset);\n            }).then(datasetInfo => {\n                idWell = datasetInfo.idWell;\n                $timeout(()=>{\n                    self.wellSpecs.push([{idWell}]);\n                    self.selectionTypes.push('curve');\n                    self.selectionXValues.push(selectionXValue);\n                    wiApi.getCurveInfoPromise(idCurves[1]).then(curveInfo => {\n                        // console.log(curveInfo.name);\n                        $timeout(()=>{\n                            self.selectionYValues.push(curveInfo.name);\n                        });\n                    })\n                });\n            });\n            \n        } else {\n            $timeout(()=>{\n                self.warning = true;\n            })\n        }\n        \n    }\n    // this.removeTab = function ($event, index){\n    //     $event.stopPropagation();\n    //     $event.preventDefault();\n    //     $timeout(() => {\n    //         self.wellSpecs.splice(index, 1);\n    //     })\n    // }\n}\n\n\n//# sourceURL=webpack:///./multi-crossplot/index.js?");

/***/ }),

/***/ "./multi-crossplot/style.less":
/*!************************************!*\
  !*** ./multi-crossplot/style.less ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/less-loader/dist/cjs.js!./style.less */ \"../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-crossplot/style.less\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ \"../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack:///./multi-crossplot/style.less?");

/***/ }),

/***/ "./multi-crossplot/template.html":
/*!***************************************!*\
  !*** ./multi-crossplot/template.html ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<wi-droppable style=\\\"display: flex;width: 100%;background: #ffffff;z-index: 1;box-shadow: 0 4px 9px #00000014;flex-basis: 40px;border-radius: 2px;\\\" on-drop=\\\"self.onDrop\\\"\\n    container-style=\\\"{display:'flex',flex: 1, position: 'relative'}\\\">\\n    <div class=\\\"tab\\\">\\n        <div class=\\\"tab-name\\\" ng-repeat=\\\"wellSpec in self.wellSpecs track by $index\\\" ng-class=\\\"{active: tabIndex === $index}\\\"\\n            ng-click=\\\"self.activateTab($index)\\\">\\n            <!-- {{self.wellSpecs[$index][0].idWell}} -->\\n            <div ng-if=\\\"self.selectionTypes[$index] === 'curve'\\\" class=\\\"curve-16x16\\\" style=\\\"margin-right: 10px;\\\"></div>\\n            <div ng-if=\\\"self.selectionTypes[$index] === 'family'\\\" class=\\\"family-16x16\\\" style=\\\"margin-right: 10px;\\\"></div>\\n            <div ng-if=\\\"self.selectionTypes[$index] === 'family-group'\\\" class=\\\"family-group-16x16\\\"\\n                style=\\\"margin-right: 10px;\\\"></div>\\n            {{self.selectionXValues[$index]}} - {{self.selectionYValues[$index]}}\\n            <!-- <div ng-click=\\\"self.removeTab($event, $index)\\\" style=\\\"margin-left: 15px;font-size: 10px; cursor: pointer;\\\" class=\\\"ti-close\\\"></div> -->\\n        </div>\\n        <div class=\\\"tab-drop\\\">\\n            Drop curves here\\n            <div style=\\\"margin-left: 15px; opacity: 0.4;\\\" class=\\\"ti-plus\\\"></div>\\n        </div>\\n    </div>\\n    <div ng-class=\\\"{'show-warning': self.warning}\\\" class=\\\"warning\\\">\\n        DROP CURVES, TRY AGIAN!\\n    </div>\\n</wi-droppable>\\n<div ng-show=\\\"tabIndex === $index\\\" class=\\\"main\\\" ng-repeat=\\\"wellSpec in self.wellSpecs track by $index\\\">\\n    <multi-well-crossplot well-spec=\\\"wellSpec\\\" zoneset-name=\\\"self.zoneNames[$index]\\\" \\n        selection-type=\\\"self.selectionTypes[$index]\\\" \\n        selection-value-list=\\\"[{\\n            name: 'X',\\n            label: 'X Axis',\\n            value: self.selectionXValues[$index],\\n            isUsed: true\\n        }, {\\n            name: 'Y',\\n            label: 'Y Axis',\\n            value: self.selectionYValues[$index],\\n            isUsed: true\\n        }, {\\n            name: 'Z1',\\n            label: 'Z1 Axis',\\n            value: 'Angle'\\n        }, {\\n            name: 'Z2',\\n            label: 'Z2 Axis',\\n            value: 'Diameter'\\n        }, {\\n            name: 'Z3',\\n            label: 'Z3 Axis',\\n            value: 'Density'\\n        }]\\\">\\n    </multi-well-crossplot>\\n</div>\";\n\n//# sourceURL=webpack:///./multi-crossplot/template.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/main-area.html":
/*!*******************************************************!*\
  !*** ./multi-well-crossplot/fragments/main-area.html ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-list-view ng-scope\\\"\\n    style=\\\"display :flex; background: #f4f4f4; padding: 9px 15px; justify-content: flex-start;\\\">\\n\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.refresh()\\\">RELOAD</span>\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.saveToAsset()\\\">SAVE</span>\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.saveAs()\\\">SAVE AS</span>\\n    <span class=\\\"fn-button\\\">PRINT</span>\\n</div>\\n<div style=\\\"flex: 1; display: flex; flex-direction: column;\\\">\\n    <div class=\\\"main-body-center border-style\\\" style=\\\"position: relative;\\\" id='layer-collection'>\\n        <layer-collection v-padding=\\\"vPadding\\\" h-padding='hPadding'>\\n            <axis-layer min-val='self.getLeft()' max-val='self.getRight()' n-ticks=\\\"self.getMajorX() * self.getMinorX()\\\"\\n                minor-ticks=\\\"self.getMinorX()\\\" loga=\\\"self.getLogaX()\\\" precision=\\\"4\\\" grid=\\\"!!self.config.grid\\\"\\n                placement=\\\"1\\\"></axis-layer>\\n            <axis-layer min-val='self.getBottom()' max-val='self.getTop()' n-ticks=\\\"self.getMajorY() * self.getMinorY()\\\"\\n                minor-ticks=\\\"self.getMinorY()\\\" loga=\\\"self.getLogaY()\\\" precision=\\\"4\\\" grid=\\\"!!self.config.grid\\\"\\n                axis-direction=\\\"'up'\\\" placement=\\\"0\\\"></axis-layer>\\n            <scatter-layer ng-show=\\\"!layer._notUsed\\\" min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\"\\n                min-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\" loga=\\\"self.getLogaX()\\\" ortho-loga=\\\"self.getLogaY()\\\"\\n                my-data-x=\\\"layer.dataX\\\" my-data-y=\\\"layer.dataY\\\"\\n                symbol=\\\"self.getSelectionValue('Z3').isUsed ? 'textSymbol' : 'circle'\\\" symbol-size=\\\"5\\\"\\n                symbol-fill-style=\\\"layer.color\\\" symbol-stroke-style=\\\"'transparent'\\\" color-func=\\\"layer.color\\\"\\n                point-size-func=\\\"layer.size\\\" symbol-func=\\\"layer.textSymbol\\\" ng-repeat=\\\"layer in self.layers\\\">\\n            </scatter-layer>\\n            <line-formula-layer min-val='self.getLeft()' max-val=\\\"self.getRight()\\\" min-draw='self.getLeft()'\\n                max-draw=\\\"self.getRight()\\\" min-y=\\\"self.getBottom()\\\" min-draw-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\"\\n                max-draw-y=\\\"self.getTop()\\\" ortho-loga=\\\"self.getLogaY()\\\" loga=\\\"self.getLogaX()\\\" formula=\\\"self.regLine\\\"\\n                eqn-offsets=\\\"['50px', '0%']\\\" line-color=\\\"self.regLine.lineColor\\\"\\n                line-dash=\\\"self.regLine.lineStyle.join(' ')\\\" line-width=\\\"self.regLine.lineWidth\\\" show-equation='true'\\n                mse=\\\"self.mse\\\" ng-if='self.regLine && self.regLine.family'>\\n            </line-formula-layer>\\n            <line-formula-layer min-val='self.getLeft()' max-val=\\\"self.getRight()\\\" min-draw='self.getLeft()'\\n                max-draw=\\\"self.getRight()\\\" min-y=\\\"self.getBottom()\\\" min-draw-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\"\\n                max-draw-y=\\\"self.getTop()\\\" ortho-loga=\\\"self.getLogaY()\\\" loga=\\\"self.getLogaX()\\\" formula=\\\"udl\\\"\\n                eqn-offsets=\\\"['65px', self.eqnOffsetY(udlIdx)]\\\" line-color=\\\"udl.lineStyle.lineColor\\\"\\n                line-dash=\\\"udl.lineStyle.lineStyle.join(' ')\\\" line-width=\\\"udl.lineStyle.lineWidth\\\"\\n                ng-repeat=\\\"(udlIdx, udl) in self.udls\\\" show-equation='true' ng-show='!udl._notUsed'>\\n            </line-formula-layer>\\n            <line-formula-layer min-val='self.getLeft()' max-val=\\\"self.getRight()\\\" min-draw='self.getLeft()'\\n                max-draw=\\\"self.getRight()\\\" min-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\" min-draw-y=\\\"self.getBottom()\\\"\\n                max-draw-y=\\\"self.getTop()\\\" ortho-loga=\\\"self.getLogaY()\\\" loga=\\\"self.getLogaX()\\\" formula=\\\"pickett\\\"\\n                show-equation='false' ng-repeat=\\\"(pickettIdx, pickett) in self.pickettLines\\\"\\n                ng-if='self.conditionForPickettPlot() && self.pickettLines && !self.notShowPickett' resolution='500'\\n                line-label='pickett.label'>\\n            </line-formula-layer>\\n            <polygon-layer ng-show=\\\"!polygon._notShow\\\" min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\"\\n                min-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\" ng-repeat=\\\"polygon in self.polygons\\\"\\n                points=\\\"polygon.points\\\" mode=\\\"polygon.mode\\\">\\n            </polygon-layer>\\n            <overlay-line-layer ng-if=\\\"self.overlayLineSpec\\\" min-val='self.getLeft()' max-val=\\\"self.getRight()\\\"\\n                min-draw='self.getLeft()' max-draw=\\\"self.getRight()\\\" min-y=\\\"self.getBottom()\\\"\\n                min-draw-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\" max-draw-y=\\\"self.getTop()\\\"\\n                ortho-loga=\\\"self.getLogaY()\\\" loga=\\\"self.getLogaX()\\\" overlay-line-spec=\\\"self.overlayLineSpec\\\">\\n            </overlay-line-layer>\\n        </layer-collection>\\n        <p style=\\\"position: absolute;left: 50%; transform: translateX(-50%); font-weight: bold; bottom: 0\\\">\\n            {{self.getConfigXLabel()}} </p>\\n        <p\\n            style=\\\"position: absolute; top: 23px; right: 45%;text-transform: uppercase; font-weight: bold; transform: translateY(-50%);\\\">\\n            {{self.getConfigTitle()}}</p>\\n        <p style=\\\"position: absolute; top: 50%;left: 15px;font-weight: bold; transform: rotate(-90deg);width: 15px;\\n        \\\">\\n            {{self.getConfigYLabel()}}</p>\\n    </div>\\n\\n    <div class=\\\"axis-info\\\" ng-if=\\\"(self.getSelectionValue('Z1').isUsed && self.zColors) || (self.getSelectionValue('Z2').isUsed && self.zSizes) || (self.getSelectionValue('Z3').isUsed && self.zSymbols)\\\">\\n        <div class=\\\"axis-Z\\\" ng-if=\\\"self.getSelectionValue('Z1').isUsed && self.zColors\\\">\\n            <div class=\\\"axis axis-type label\\\">\\n                <span class=\\\"ellipsis-text\\\">\\n                        {{ self.getSelectionValue('Z1').value }}\\n                </span>\\n            </div>\\n            <div style=\\\"display: flex; flex: 1;\\\">\\n                <div class=\\\"axis axis-min label\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ1Min() }}\\n                    </span>\\n                </div>\\n                <div style=\\\"display: flex; flex: 1;position: relative;\\\">\\n                    <div style=\\\"display: flex; flex: 1; z-index: 1; \\\">\\n                        <div class=\\\"axis axis-line\\\"  ng-repeat=\\\"segColor in self.zColors track by $index\\\" style=\\\"background-color:{{segColor}};\\\">\\n                            <span></span>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"axis axis-max label\\\" style=\\\"margin-right: 0;\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ1Max() }}\\n                    </span>\\n                </div>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"axis-Z\\\" ng-if=\\\"self.getSelectionValue('Z2').isUsed && self.zSizes\\\">\\n            <div class=\\\"axis axis-type label\\\">\\n                <span class=\\\"ellipsis-text\\\">\\n                        {{ self.getSelectionValue('Z2').value }}\\n                </span>\\n            </div>\\n            <div style=\\\"display: flex; flex: 1;\\\">\\n                <div class=\\\"axis axis-min label\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ2Min() }}\\n                    </span>\\n                </div>\\n                <div style=\\\"display: flex; flex: 1;position: relative;\\\">\\n                    <div style=\\\"display: flex; flex: 1; z-index: 1; \\\">\\n                        <div class=\\\"axis axis-line\\\" ng-repeat=\\\"segSize in self.zSizes\\\">\\n                            <span>{{segSize}}</span>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"axis axis-max label\\\" style=\\\"margin-right: 0;\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ2Max() }}\\n                    </span>\\n                </div>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"axis-Z\\\" style=\\\"margin-bottom: 0;\\\" ng-if=\\\"self.getSelectionValue('Z3').isUsed && self.zSymbols\\\">\\n            <div class=\\\"axis axis-type label\\\">\\n                <span class=\\\"ellipsis-text\\\">\\n                        {{ self.getSelectionValue('Z3').value }}\\n                </span>\\n            </div>\\n            <div style=\\\"display: flex; flex: 1;\\\">\\n                <div class=\\\"axis axis-min label\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ3Min() }}\\n                    </span>\\n                </div>\\n                <div style=\\\"display: flex; flex: 1;position: relative;\\\">\\n                    <div style=\\\"display: flex; flex: 1; z-index: 1; \\\">\\n                        <div class=\\\"axis axis-line\\\" ng-repeat=\\\"segSymbol in self.zSymbols\\\">\\n                            <span>{{segSymbol}}</span>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"axis axis-max label\\\" style=\\\"margin-right: 0;\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ3Max() }}\\n                    </span>\\n                </div>\\n            </div>\\n\\n        </div>\\n    </div>\\n    <div class=\\\"statistic-table\\\" resizable r-directions=\\\"['top']\\\" r-flex=\\\"true\\\">\\n        <div style=\\\"overflow-x: auto; position: absolute; top: 0; right: 0; left: 0; bottom: 0;\\\">\\n            <wi-table-view ng-if=\\\"self.layers.length\\\" row-count=\\\"self.getZoneNames().length\\\"\\n                col-count=\\\"self.getHeaders().length\\\" col-headers=\\\"self.getHeaders()\\\"\\n                get-row-icons=\\\"self.getStatsRowIcons\\\" get-row-icon-style=\\\"self.getStatsIconStyle\\\"\\n                row-headers=\\\"self.getZoneNames()\\\" accessor=\\\"self.statsValue\\\">\\n            </wi-table-view>\\n        </div>\\n\\n    </div>\\n</div>\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/main-area.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/side-bar.html":
/*!******************************************************!*\
  !*** ./multi-well-crossplot/fragments/side-bar.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = \"<side-bar my-default-width=\\\"420\\\" orientation=\\\"w\\\" collapsed=\\\"false\\\">\\n    <div style=\\\"display: flex; flex-direction: column; height: 100%;flex: 1;\\\">\\n        <div style=\\\"display: flex; flex-direction: column; width: 100%; height: 100%;\\\">\\n            <!-- -----WELLS----- -->\\n            <div ng-show=\\\"isSet(1)\\\" style=\\\"overflow: auto;flex: 1;display:flex;flex-direction:column;\\\">\\n                \" + __webpack_require__(/*! ./tab1.html */ \"./multi-well-crossplot/fragments/tab1.html\") + \"\\n            </div>\\n            <!-- -----ZONE----- -->\\n            <div ng-show=\\\"isSet(2)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./tab2.html */ \"./multi-well-crossplot/fragments/tab2.html\") + \"\\n            </div>\\n            <!-- -----CONFIG----- -->\\n            <div ng-show=\\\"isSet(3)\\\" style=\\\"overflow: hidden; flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./tab3.html */ \"./multi-well-crossplot/fragments/tab3.html\") + \"\\n            </div>\\n            <!-- -----FORMULA----- -->\\n            <div ng-show=\\\"isSet(4)\\\"\\n                style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./tab4.html */ \"./multi-well-crossplot/fragments/tab4.html\") + \"\\n            </div>\\n            <!-- -----REGRESSION----- -->\\n            <div ng-show=\\\"isSet(5)\\\"\\n                style=\\\"overflow: auto;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./tab5.html */ \"./multi-well-crossplot/fragments/tab5.html\") + \"\\n            </div>\\n            <!-- -----LAYERS----- -->\\n            <div ng-show=\\\"isSet(6)\\\"\\n                style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./tab6.html */ \"./multi-well-crossplot/fragments/tab6.html\") + \"\\n            </div>\\n            <!-- -----PRINT SETTINGS----- -->\\n            <div ng-show=\\\"isSet(7)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./tab7.html */ \"./multi-well-crossplot/fragments/tab7.html\") + \"\\n            </div>\\n            <div ng-show=\\\"isSet(8)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./tab8.html */ \"./multi-well-crossplot/fragments/tab8.html\") + \"\\n            </div>\\n            <div ng-show=\\\"isSet(9)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./tab9.html */ \"./multi-well-crossplot/fragments/tab9.html\") + \"\\n            </div>\\n        </div>\\n        <div style=\\\"display: flex;\\\" >\\n            <span class=\\\"button-update\\\" ng-class=\\\"{'disabled-click': !self.isSettingChange}\\\"\\n                ng-click=\\\"self.genLayers()\\\">\\n                Update\\n            </span>\\n        </div>\\n    </div>\\n    <div class=\\\"label-list-view\\\" style=\\\" display :flex;\\n            border-left: 1px solid #e4e4e4; \\n            flex-direction: column;\\n            justify-content: start;\\n            padding: 0px;\\n            right: 0;\\n            position: sticky;\\\">\\n        <div style=\\\"overflow-y: overlay; overflow-x: hidden; display :flex; flex:1; flex-direction: column; justify-content: start; box-shadow: 0 10px 10px #00000017;\\\">\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(1)}\\\" ng-click=\\\"setTab(1)\\\">\\n                <div style=\\\"margin: 10px;\\\">\\n                    Wells\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(3)}\\\" ng-click=\\\"setTab(3)\\\">\\n                <div>\\n                    Configuration\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(2)}\\\" ng-click=\\\"setTab(2)\\\">\\n                <div style=\\\"margin: 22px;\\\">\\n                    Zone\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(4)}\\\" ng-click=\\\"setTab(4)\\\">\\n                <div style=\\\"margin: 0px;\\\">\\n                    Formula\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(5)}\\\" ng-click=\\\"setTab(5)\\\">\\n                <div style=\\\"margin: 10px;\\\">\\n                    Regression Line\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(6)}\\\" ng-click=\\\"setTab(6)\\\">\\n                <div style=\\\"margin: 30px;\\\">\\n                    Layers\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(8)}\\\" ng-click=\\\"setTab(8)\\\">\\n                <div style=\\\"margin: 3px;\\\">\\n                    Overlay Line\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(9)}\\\" ng-click=\\\"setTab(9)\\\" ng-if='self.conditionForPickettPlot()'>\\n                <div style=\\\"margin: 20px;\\\">\\n                    Pickett Plot\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(7)}\\\" ng-click=\\\"setTab(7)\\\">\\n                <div style=\\\"margin: 19px;\\\">\\n                    Print Setting\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n </side-bar>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/side-bar.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/tab1.html":
/*!**************************************************!*\
  !*** ./multi-well-crossplot/fragments/tab1.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Wells</div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\" margin-top: 5px;padding-bottom: 5px; display: flex; justify-content: space-between;\\\">\\n    <span>Input</span>\\n    <div>\\n        <span ng-class=\\\"{'active' : self.selectionType === 'family-group'}\\\"\\n            ng-click=\\\"self.selectionType='family-group'\\\" class=\\\"button-with-label\\\"\\n            style=\\\"margin-right: 8px;\\\">Family Group</span>\\n        <span ng-class=\\\"{'active' : self.selectionType === 'family'}\\\"\\n            ng-click=\\\"self.selectionType='family'\\\" class=\\\"button-with-label\\\"\\n            style=\\\"margin-right: 8px;\\\">Family</span>\\n        <span ng-class=\\\"{'active' : self.selectionType === 'curve'}\\\"\\n            ng-click=\\\"self.selectionType='curve'\\\" class=\\\"button-with-label\\\">Curve</span>\\n    </div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\"display: flex; justify-content: space-between; padding-top: 20px;\\\">\\n    <span>Scale Axis</span>\\n    <div>\\n        <span ng-class=\\\"{'active' : self.getSelectionValue('Z1').isUsed}\\\" style=\\\"margin-right: 8px;\\\"\\n            ng-click=\\\"self.getSelectionValue('Z1').isUsed = !self.getSelectionValue('Z1').isUsed\\\" class=\\\"button-with-label\\\">\\n            Color Z1\\n        </span>\\n        <span ng-class=\\\"{'active' : self.getSelectionValue('Z2').isUsed}\\\" style=\\\"margin-right: 8px;\\\"\\n            ng-click=\\\"self.getSelectionValue('Z2').isUsed = !self.getSelectionValue('Z2').isUsed\\\" class=\\\"button-with-label\\\">\\n            Point Size Z2\\n        </span>\\n        <span ng-class=\\\"{'active' : self.getSelectionValue('Z3').isUsed}\\\" style=\\\"margin-right: 8px;\\\"\\n            ng-click=\\\"self.getSelectionValue('Z3').isUsed = !self.getSelectionValue('Z3').isUsed\\\" class=\\\"button-with-label\\\">\\n            Label Z3 \\n        </span>\\n    </div>\\n</div>\\n<div style=\\\"padding: 8px 15px;\\\" class=\\\"label-option-sidebar\\\"\\n    ng-repeat=\\\"selectionValue in self.selectionValueList\\\"\\n    ng-show=\\\"selectionValue.isUsed\\\">\\n    <div class=\\\"selection-sidebar\\\">\\n        <span>{{selectionValue.label}}</span>\\n        <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.selectionList'\\n            current-select=\\\"selectionValue.value\\\"\\n            on-item-changed=\\\"selectionValue.onChange\\\">\\n        </wi-dropdown-list>\\n    </div>\\n</div>\\n<div style=\\\"overflow: overlay; display:flex; flex-direction: column;\\\">\\n    <div style=\\\"border: 1px solid #e4e4e4;margin: 5px 15px;border-radius: 2px; cursor: pointer;\\\"\\n        ng-repeat='well in self.treeConfig'>\\n        <div style=\\\"display: flex; flex-direction: row;padding: 10px;background: #f4f4f4; align-items: center;justify-content: space-between;text-align: center;\\\">\\n                <div style=\\\" display: flex;align-items: center;\\\">\\n                    <i class=\\\"header-icon\\\"\\n                        ng-class=\\\"{'fa fa-caret-down': !well._hidden, 'fa fa-caret-right': well._hidden}\\\"\\n                        ng-click=\\\"well._hidden = !well._hidden\\\"></i>\\n                    <div ng-bind=\\\"well.name\\\" style=\\\"font-weight: bold; max-width: 120px; white-space: nowrap;text-overflow: ellipsis; overflow: hidden;\\\"></div>\\n                </div>\\n               \\n                <div>\\n                    <span\\n                        ng-class=\\\"{'red-color fa fa-eye-slash': well._notUsed, 'blue-color fa fa-eye': !well._notUsed }\\\"\\n                        ng-click=\\\"self.toggleWell(well)\\\"\\n                        style=\\\"cursor: pointer; margin-right: 15px;\\\">\\n                    </span>\\n                    <span class=\\\"fa fa-filter\\\"\\n                        ng-class=\\\"{'blue-color': self.hasDiscriminator(well)}\\\"\\n                        ng-click=\\\"self.discriminatorDialog(well)\\\"\\n                        style=\\\"cursor: pointer; margin-right: 17px;\\\">\\n                    </span>\\n                    <span class=\\\"fa fa-times-circle\\\" ng-click=\\\"self.removeWell(well)\\\"\\n                        style=\\\"color: rgb(163, 163, 163);cursor: pointer;margin-right: 5px;\\\">\\n                    </span>\\n                </div>\\n        </div>\\n        <div style=\\\"display: flex; flex-direction: row ; flex-wrap: wrap; max-width: 420px; background: #f4f4f4; align-items: center;justify-content: flex-start;text-align: center;\\\">\\n            <div class=\\\"axis-bar\\\" ng-class='{\\\"selected\\\": well.isSettingAxis == selectionValue.name}'\\n                ng-click=\\\"well.isSettingAxis = selectionValue.name\\\"\\n                ng-repeat=\\\"selectionValue in self.selectionValueList\\\" ng-show=\\\"selectionValue.isUsed\\\">\\n                <div ng-bind=\\\"selectionValue.name\\\" style=\\\"font-weight: bold;\\\"></div>\\n                <div style=\\\"margin: 0 10px; max-width: 70px; flex: 1;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;\\\"\\n                    ng-bind=\\\"self.getWellSpec(well)[self.getAxis(selectionValue.name)].datasetName\\\"></div>\\n                <div ng-bind=\\\"self.getCurve(well, self.getAxisKey(selectionValue.name)).name\\\"></div>\\n            </div>\\n        </div>\\n        <wi-tree-view-virtual ng-show=\\\"!well._hidden\\\" tree-root=\\\"well\\\" get-label=\\\"self.getLabel\\\"\\n            filter=\\\"self.getFilterForWell(self.getAxisKey(well.isSettingAxis))\\\" get-icon=\\\"self.getIcon\\\"\\n            get-children=\\\"self.getChildren\\\" keep-children='true' uncollapsible='true'\\n            run-match=\\\"self.runWellMatch\\\" hide-unmatched=\\\"true\\\" hide-search='true'\\n            click-fn='self.clickFunction'>\\n        </wi-tree-view-virtual>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/tab1.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/tab2.html":
/*!**************************************************!*\
  !*** ./multi-well-crossplot/fragments/tab2.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Zone</div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\">\\n    <div class=\\\"selection-sidebar\\\">\\n        <span>Zoneset</span>\\n        <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.zonesetList'\\n            current-select=\\\"self.zonesetName\\\"\\n            on-item-changed=\\\"self.onZonesetSelectionChanged\\\">\\n        </wi-dropdown-list>\\n    </div>\\n</div>\\n<div style=\\\"display: flex; padding: 0 15px 10px 15px;\\\">\\n    <span ng-click=\\\"self.hideSelectedZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 0;\\\">Hide</span>\\n    <span ng-click=\\\"self.showSelectedZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Show</span>\\n    <span ng-click=\\\"self.hideAllZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Hide All</span>\\n    <span ng-click=\\\"self.showAllZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Show All</span>\\n</div>\\n<div ng-show=\\\"self.zoneTree\\\"\\n    style=\\\"border: 1px solid #e4e4e4;margin: 5px 15px;border-radius: 2px;flex: 1;overflow: auto; \\\">\\n    <wi-tree-view-virtual tree-root=\\\"self.zoneTree\\\" get-label=\\\"self.getZoneLabel\\\"\\n        filter=\\\"self.zoneFilter\\\" get-icon=\\\"self.getZoneIcon\\\" get-children=\\\"self.noChildren\\\"\\n        keep-children='true' run-match=\\\"self.runZoneMatch\\\" hide-unmatched=\\\"true\\\"\\n        hide-search='false' click-fn='self.click2ToggleZone'>\\n    </wi-tree-view-virtual>\\n</div>\\n<div ng-hide=\\\"self.zoneTree\\\" style=\\\"border: 1px solid #e4e4e4; margin: 5px 15px;\\\">\\n    zonationAll\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/tab2.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/tab3.html":
/*!**************************************************!*\
  !*** ./multi-well-crossplot/fragments/tab3.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>\\n        Configuration\\n    </div>\\n</div>\\n<div style=\\\"overflow: auto;\\\">\\n    <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 15px 15px 0 15px;\\\">\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'Title'\\\" item-value=\\\"self.getConfigTitle\\\"\\n                set-value=\\\"self.setConfigTitle\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n    </div>\\n \\n    <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 0 15px;\\\">\\n            <div style=\\\"display: flex;margin: 15px 0;\\\">X-Axis Scale\\n                    <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n                    </div>\\n                </div>\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'X Label'\\\" item-value=\\\"self.getConfigXLabel\\\"\\n                set-value=\\\"self.setConfigXLabel\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Left'\\\" item-value=\\\"self.getConfigLeft\\\" set-value=\\\"self.setConfigLeft\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n                <div style=\\\"margin-right: 15px; \\\"></div>\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Right'\\\" item-value=\\\"self.getConfigRight\\\"\\n                        set-value=\\\"self.setConfigRight\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n        </div>\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;flex: 1;\\\">\\n                        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                            item-label=\\\"'Major X'\\\" item-value=\\\"self.getConfigMajorX\\\"\\n                            set-value=\\\"self.setConfigMajorX\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                        </editable>\\n                    </div>\\n                    <div style=\\\"margin-right: 15px; \\\"></div>\\n                    <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;flex: 1;\\\">\\n                        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                            item-label=\\\"'Minor X'\\\" item-value=\\\"self.getConfigMinorX\\\"\\n                            set-value=\\\"self.setConfigMinorX\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                        </editable>\\n                    </div>\\n        </div>\\n    </div>\\n  \\n    <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 0 15px;\\\">\\n        <div style=\\\"display: flex;margin: 15px 0;\\\">Y-Axis Scale\\n            <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'Y Label'\\\" item-value=\\\"self.getConfigYLabel\\\"\\n                set-value=\\\"self.setConfigYLabel\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div style=\\\"display: flex;\\\">\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Top'\\\" item-value=\\\"self.getConfigTop\\\" set-value=\\\"self.setConfigTop\\\"\\n                    enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n            <div style=\\\"margin-right: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;flex: 1;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Bottom'\\\" item-value=\\\"self.getConfigBottom\\\"\\n                    set-value=\\\"self.setConfigBottom\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n        </div>\\n       \\n        \\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                            item-label=\\\"'Major Y'\\\" item-value=\\\"self.getConfigMajorY\\\"\\n                            set-value=\\\"self.setConfigMajorY\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                        </editable>\\n                    </div>\\n                    <div style=\\\"margin-right: 15px; \\\"></div>\\n                    <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;flex: 1;\\\">\\n                        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                            item-label=\\\"'Minor Y'\\\" item-value=\\\"self.getConfigMinorY\\\"\\n                            set-value=\\\"self.setConfigMinorY\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                        </editable>\\n                    </div>\\n                    \\n        </div>\\n        \\n    </div>\\n    <div ng-show=\\\"self.getSelectionValue('Z1').isUsed\\\">\\n      \\n        <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 0 15px;\\\">\\n                <div style=\\\"display: flex;margin: 15px 0;\\\">Color Z1\\n                        <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n                        </div>\\n                    </div>\\n            <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Min'\\\" item-value=\\\"self.getZ1Min\\\" set-value=\\\"self.setZ1Min\\\"\\n                        enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n                <div style=\\\"margin-right: 15px; \\\"></div>\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Max'\\\" item-value=\\\"self.getZ1Max\\\"\\n                        set-value=\\\"self.setZ1Max\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n            </div>\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'N'\\\" item-value=\\\"self.getZ1N\\\"\\n                    set-value=\\\"self.setZ1N\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n        </div>\\n        <!-- <div style=\\\"padding: 15px 20px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n            <span ng-class=\\\"{}\\\" style=\\\"margin-right: 8px;\\\"\\n                ng-click=\\\"self.modifyColorZ1()\\\" class=\\\"button-with-label\\\">Modify Color</span>\\n        </div> -->\\n    </div>\\n    <div ng-show=\\\"self.getSelectionValue('Z2').isUsed\\\">\\n        <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 0 15px;\\\">\\n            <div style=\\\"display: flex;margin: 15px 0;\\\">Point Size Z2\\n                <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n                </div>\\n            </div>\\n            <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Min'\\\" item-value=\\\"self.getZ2Min\\\" set-value=\\\"self.setZ2Min\\\"\\n                        enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n                <div style=\\\"margin-right: 15px; \\\"></div>\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Max'\\\" item-value=\\\"self.getZ2Max\\\"\\n                        set-value=\\\"self.setZ2Max\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n            </div>\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'N'\\\" item-value=\\\"self.getZ2N\\\"\\n                    set-value=\\\"self.setZ2N\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n        </div>\\n    </div>\\n    <div ng-show=\\\"self.getSelectionValue('Z3').isUsed\\\">\\n        <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 0 15px;\\\">\\n            <div style=\\\"display: flex;margin: 15px 0;\\\">Label Z3\\n                <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n                </div>\\n            </div>\\n            <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Min'\\\" item-value=\\\"self.getZ3Min\\\" set-value=\\\"self.setZ3Min\\\"\\n                        enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n                <div style=\\\"margin-right: 15px; \\\"></div>\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Max'\\\" item-value=\\\"self.getZ3Max\\\"\\n                        set-value=\\\"self.setZ3Max\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n            </div>\\n            \\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'N'\\\" item-value=\\\"self.getZ3N\\\"\\n                    set-value=\\\"self.setZ3N\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 15px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Log scales\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div>\\n            <span ng-class=\\\"{'active' : self.getLogaX()}\\\" style=\\\"margin-right: 8px;\\\"\\n                ng-click=\\\"self.config.logaX=!self.config.logaX\\\" class=\\\"button-with-label\\\">Loga\\n                X</span>\\n            <span ng-class=\\\"{'active' : self.getLogaY()}\\\" style=\\\"margin-right: 8px;\\\"\\n                ng-click=\\\"self.config.logaY=!self.config.logaY\\\" class=\\\"button-with-label\\\">Loga\\n                Y</span>\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 15px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Color Mode\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div>\\n            <span ng-class=\\\"{'active' : self.config.colorMode === 'zone'}\\\"\\n                ng-click=\\\"self.config.colorMode='zone'\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\"> Zone Color</span>\\n            <span ng-class=\\\"{'active' : self.config.colorMode === 'well'}\\\"\\n                style=\\\"margin-right: 8px;\\\" ng-click=\\\"self.config.colorMode='well'\\\"\\n                class=\\\"button-with-label\\\">Well Color</span>\\n            <!-- <span ng-class=\\\"{'active' : self.config.colorMode === 'user'}\\\"\\n                ng-click=\\\"self.config.colorMode='user'\\\" class=\\\"button-with-label\\\">User\\n                Defined</span> -->\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 15px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Reverse Axis\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div>\\n            <span ng-click=\\\"self.reverseAxis()\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\">Reverse Axis</span>\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 15px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Table Header\\n            <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div style=\\\"display: flex; flex-wrap: wrap;\\\">\\n            <span ng-repeat=\\\"(headerIdx, header) in self.statisticHeaders\\\"\\n                class=\\\"select-table-header\\\" ng-class=\\\"{'active' : self.statisticHeaderMasks[headerIdx]}\\\"\\n                ng-click=\\\"self.statisticHeaderMasks[headerIdx]= !self.statisticHeaderMasks[headerIdx]\\\">\\n                {{header}}</span>\\n        </div>\\n    </div>\\n</div>\\n\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/tab3.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/tab4.html":
/*!**************************************************!*\
  !*** ./multi-well-crossplot/fragments/tab4.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>\\n        Formular\\n    </div>\\n</div>\\n<div style=\\\"margin: 15px;\\\" class='bottom-add' ng-click=\\\"self.addUDL()\\\">Add</div>\\n<div style=\\\"overflow: overlay;\\\">\\n    <div class=\\\"list-formular\\\" ng-repeat=\\\"udl in self.udls\\\">\\n        <div class=\\\"selection-sidebar\\\"\\n            style=\\\"padding: 9px 10px 5px 10px; flex: 4; margin-right: 15px; border: none;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'Y = '\\\" item-value=\\\"self.getFnUDL\\\" params=\\\"$index\\\"\\n                set-value=\\\"self.setFnUDL\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'left'}\\\">\\n            </editable>\\n        </div>\\n        <div class=\\\"selection-sidebar\\\"\\n            style=\\\"padding: 9px 10px 5px 10px; cursor: pointer; flex: 1; border: none;\\\">\\n            <span\\n                ng-class=\\\"{'red-color fa fa-eye-slash': udl._notUsed, 'blue-color fa fa-eye': !udl._notUsed }\\\"\\n                ng-click=\\\"udl._notUsed = !udl._notUsed\\\"\\n                style=\\\"cursor: pointer; margin-right: 15px;\\\">\\n            </span>\\n            <line-style bind-line-style=\\\"udl.lineStyle\\\"></line-style>\\n        </div>\\n        <div class=\\\"fa fa-times delete-button\\\" ng-click=\\\"self.removeUDL($index)\\\"></div>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/tab4.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/tab5.html":
/*!**************************************************!*\
  !*** ./multi-well-crossplot/fragments/tab5.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>\\n        Regression Line\\n    </div>\\n</div>\\n<div style=\\\"padding: 8px 16px 0;\\\" class=\\\"label-option-sidebar\\\">\\n    <div class=\\\"selection-sidebar\\\">\\n        <span>Type</span>\\n        <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.regressionTypeList'\\n            current-select=\\\"self.regressionType\\\"\\n            on-item-changed=\\\"self.onRegressionTypeChange\\\">\\n        </wi-dropdown-list>\\n    </div>\\n</div>\\n<div ng-show=\\\"self.layers\\\"\\n    style=\\\"border: 1px solid #e4e4e4;margin: 5px 15px 0 15px;border-radius: 2px;flex: 1;overflow: hidden; \\\">\\n    <wi-tree-view-virtual tree-root=\\\"self.getLayerTree()\\\" get-label=\\\"self.getLayerLabel\\\"\\n        filter=\\\"self.layerFilter\\\" get-icon=\\\"self.getRegIcon\\\"\\n        get-icons=\\\"self.getRegIcons\\\" icon-style=\\\"self.getRegIconStyle\\\" get-children=\\\"self.noChildren\\\" keep-children='true'\\n        run-match=\\\"self.runLayerMatch\\\" hide-unmatched=\\\"true\\\" hide-search='false'\\n        click-fn='self.click2ToggleRegression'>\\n    </wi-tree-view-virtual>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\"padding: 15px; display: flex; flex-direction: column; overflow: auto; flex: 1;\\\">\\n    <div style=\\\"display: flex;margin-bottom: 0;\\\">Polygon\\n        <div\\n            style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n        </div>\\n    </div>\\n    <div style='margin: 0; margin-top: 17px' class='bottom-add' ng-click=\\\"self.addPolygon()\\\">Add</div>\\n    <div style='margin: 7px 0 0;'>\\n        <span ng-class=\\\"{'active' : self.polygonExclude === true}\\\"\\n            ng-click=\\\"self.polygonExclude = !self.polygonExclude\\\" class=\\\"button-with-label\\\"\\n            style=\\\"margin-right: 8px;\\\">Exclude</span>\\n    </div>\\n    <div style=\\\"overflow: auto;\\\">\\n        <div style=\\\" margin: 15px 0 15px 0;\\\"class=\\\"list-formular\\\" ng-repeat=\\\"polygon in self.polygons\\\">\\n            <div class=\\\"selection-sidebar\\\"\\n                style=\\\"padding: 9px 10px 5px 10px; flex: 4; margin-right: 15px; border: none;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"\\\" item-value=\\\"polygon.label\\\" params=\\\"$index\\\"\\n                    set-value=\\\"self.setPolygonLabel\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'left'}\\\">\\n                </editable>\\n            </div>\\n            <div class=\\\"selection-sidebar\\\"\\n                style=\\\"padding: 9px 10px 5px 10px; cursor: pointer; flex: 1; border: none;\\\">\\n                <span\\n                    ng-class=\\\"{'red-color fa fa-check': polygon._notUsed, 'blue-color fa fa-check': !polygon._notUsed }\\\"\\n                    ng-click=\\\"polygon._notUsed = !polygon._notUsed\\\"\\n                    style=\\\"cursor: pointer; margin-right: 15px;\\\">\\n                </span>\\n                <span\\n                    ng-class=\\\"{'red-color fa fa-eye-slash': polygon._notShow, 'blue-color fa fa-eye': !polygon._notShow }\\\"\\n                    ng-click=\\\"polygon._notShow = !polygon._notShow\\\"\\n                    style=\\\"cursor: pointer; margin-right: 15px;\\\">\\n                </span>\\n                <span\\n                    ng-class=\\\"{'red-color fa fa-edit': !polygon.mode, 'blue-color fa fa-edit': polygon.mode == 'edit' }\\\"\\n                    ng-click=\\\"self.toggleEditPolygon(polygon)\\\"\\n                    style=\\\"cursor: pointer; margin-right: 15px;\\\">\\n                </span>\\n            </div>\\n            <div class=\\\"fa fa-times delete-button\\\" ng-click=\\\"self.removePolygon($index)\\\"></div>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/tab5.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/tab6.html":
/*!**************************************************!*\
  !*** ./multi-well-crossplot/fragments/tab6.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Layer Setting</div>\\n</div>\\n<div style=\\\"display: flex; padding: 16px 16px 10px 16px;\\\">\\n    <span ng-click=\\\"self.hideSelectedLayer()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 0px;\\\">Hide</span>\\n    <span ng-click=\\\"self.showSelectedLayer()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Show</span>\\n    <span ng-click=\\\"self.hideAllLayer()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Hide All</span>\\n    <span ng-click=\\\"self.showAllLayer()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Show All</span>\\n</div>\\n<div ng-show=\\\"self.layers\\\"\\n    style=\\\"border: 1px solid #e4e4e4;margin: 5px 15px;border-radius: 2px;flex: 1;overflow: auto; \\\">\\n    <wi-tree-view-virtual tree-root=\\\"self.getLayerTree()\\\" get-label=\\\"self.getLayerLabel\\\"\\n        filter=\\\"self.layerFilter\\\" get-icon=\\\"self.getLayerIcon\\\"\\n        get-icons=\\\"self.getLayerIcons\\\" icon-style=\\\"self.getLayerIconStyle\\\" get-children=\\\"self.noChildren\\\" keep-children='true'\\n        run-match=\\\"self.runLayerMatch\\\" hide-unmatched=\\\"true\\\" hide-search='false'\\n        click-fn='self.click2ToggleLayer'>\\n    </wi-tree-view-virtual>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/tab6.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/tab7.html":
/*!**************************************************!*\
  !*** ./multi-well-crossplot/fragments/tab7.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Print Setting</div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\"padding: 20px 20px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n    <div style=\\\"display: flex;margin-bottom: 16px;\\\">Orientation\\n        <div\\n            style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n        </div>\\n    </div>\\n    <div>\\n        <span ng-class=\\\"{'active' : self.printSettings.orientation === 'portrait'}\\\"\\n            ng-click=\\\"self.printSettings.orientation='portrait'\\\" class=\\\"button-with-label\\\"\\n            style=\\\"margin-right: 8px;\\\">Portrait</span>\\n        <span ng-class=\\\"{'active' : self.printSettings.orientation === 'landscape'}\\\"\\n            style=\\\"margin-right: 8px;\\\" ng-click=\\\"self.printSettings.orientation='landscape'\\\"\\n            class=\\\"button-with-label\\\">Landscape</span>\\n    </div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\"padding: 20px 20px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n    <div style=\\\"display: flex;margin-bottom: 16px;\\\">Aspect Ratio\\n        <div\\n            style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n        </div>\\n    </div>\\n    <div>\\n        <span ng-class=\\\"{'active' : self.printSettings.aspectRatio === '16:9'}\\\"\\n            ng-click=\\\"self.printSettings.aspectRatio='16:9'\\\" class=\\\"button-with-label\\\"\\n            style=\\\"margin-right: 8px;\\\">16:9</span>\\n        <span ng-class=\\\"{'active' : self.printSettings.aspectRatio === '4:3'}\\\"\\n            style=\\\"margin-right: 8px;\\\" ng-click=\\\"self.printSettings.aspectRatio='4:3'\\\"\\n            class=\\\"button-with-label\\\">4:3</span>\\n    </div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\"padding: 20px 20px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n    <div style=\\\"display: flex;margin-bottom: 16px;\\\">Alignment\\n        <div\\n            style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n        </div>\\n    </div>\\n    <div>\\n        <span ng-class=\\\"{'active' : self.printSettings.alignment === 'left'}\\\"\\n            ng-click=\\\"self.printSettings.alignment='left'\\\" class=\\\"button-with-label\\\"\\n            style=\\\"margin-right: 8px;\\\">Left</span>\\n        <span ng-class=\\\"{'active' : self.printSettings.alignment === 'center'}\\\"\\n            style=\\\"margin-right: 8px;\\\" ng-click=\\\"self.printSettings.alignment='center'\\\"\\n            class=\\\"button-with-label\\\">Center</span>\\n        <span ng-class=\\\"{'active' : self.printSettings.alignment === 'right'}\\\"\\n            style=\\\"margin-right: 8px;\\\" ng-click=\\\"self.printSettings.alignment='right'\\\"\\n            class=\\\"button-with-label\\\">Right</span>\\n    </div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\"padding: 20px 20px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n    <div style=\\\"display: flex;margin-bottom: 16px;\\\">Width\\n        <div\\n            style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n        </div>\\n    </div>\\n    <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n            item-label=\\\"'Width(mm)'\\\" item-value=\\\"self.printSettings.width\\\"\\n            set-value=\\\"self.setWidthPrintSettings\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n        </editable>\\n    </div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\"padding: 20px 20px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n    <div style=\\\"display: flex;margin-bottom: 16px;\\\">Misc\\n        <div\\n            style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n        </div>\\n    </div>\\n    <div>\\n        <span ng-class=\\\"{'active' : self.printSettings.border}\\\"\\n            ng-click=\\\"self.printSettings.border = !self.printSettings.border\\\" class=\\\"button-with-label\\\"\\n            style=\\\"margin-right: 8px;\\\">Border</span>\\n    </div>\\n    <div style=\\\"margin-bottom: 15px; \\\"></div>\\n    <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n            item-label=\\\"'Vertical Margin(mm)'\\\" item-value=\\\"self.printSettings.vMargin\\\"\\n            set-value=\\\"self.setVMarginPrintSettings\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n        </editable>\\n    </div>\\n    <div style=\\\"margin-bottom: 15px; \\\"></div>\\n    <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n            item-label=\\\"'Horizontal Margin(mm)'\\\" item-value=\\\"self.printSettings.hMargin\\\"\\n            set-value=\\\"self.setHMarginPrintSettings\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n        </editable>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/tab7.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/tab8.html":
/*!**************************************************!*\
  !*** ./multi-well-crossplot/fragments/tab8.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Overlay Line</div>\\n</div>\\n<div style=\\\"margin: 15px;overflow: hidden;border: 1px solid #ddd;border-radius: 2px;\\\" class=\\\"disable-node-caret\\\">\\n    <wi-tree-view-virtual tree-root=\\\"self.listOverlayLine\\\" \\n        get-label=\\\"self.getOvlLabel\\\" get-icon=\\\"self.getOvlIcon\\\"\\n        get-children=\\\"self.getOvlChildren\\\" keep-children='true' uncollapsible='true'\\n        run-match=\\\"self.runOvlMatch\\\" hide-unmatched=\\\"true\\\" hide-search='false'\\n        click-fn='self.clickOvlFunction'>\\n    </wi-tree-view-virtual>\\n</div>\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/tab8.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/tab9.html":
/*!**************************************************!*\
  !*** ./multi-well-crossplot/fragments/tab9.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>\\n        Picket Plot\\n    </div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\">\\n    <div>\\n        <div class=\\\"switch-label\\\">\\n           Show Pickett\\n            <label class=\\\"switch\\\">\\n                      <input type=\\\"checkbox\\\" checked>\\n                      <span class=\\\"slider round\\\" ng-click=\\\"self.notShowPickett = !self.notShowPickett\\\"></span>\\n            </label>\\n        </div>\\n        <div\\n            style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-bottom: 6px; margin-top: 18px;\\\">\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\">\\n    <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n            item-label=\\\"'Rw'\\\" item-value=\\\"self.getRwParam\\\" set-value=\\\"self.setRwParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n        </editable>\\n    </div>\\n    <div style=\\\"margin-bottom: 15px; \\\"></div>\\n    <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n            item-label=\\\"'m'\\\" item-value=\\\"self.getMParam\\\"\\n            set-value=\\\"self.setMParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n        </editable>\\n    </div>\\n    <div style=\\\"margin-bottom: 15px; \\\"></div>\\n    <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n            item-label=\\\"'n'\\\" item-value=\\\"self.getNParam\\\"\\n            set-value=\\\"self.setNParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n        </editable>\\n    </div>\\n    <div style=\\\"margin-bottom: 15px; \\\"></div>\\n    <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n            item-label=\\\"'a'\\\" item-value=\\\"self.getAParam\\\"\\n            set-value=\\\"self.setNParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n        </editable>\\n    </div>\\n    <div style=\\\"margin-bottom: 15px; \\\"></div>\\n</div>\\n<div style=\\\"margin: 15px;\\\" class='bottom-add' ng-click=\\\"self.addPickettLine()\\\">Add</div>\\n<div style=\\\"overflow: overlay;\\\">\\n    <div class=\\\"list-formular\\\" ng-repeat=\\\"(pickettIdx, pickett) in self.pickettLines\\\">\\n        <div class=\\\"selection-sidebar\\\"\\n            style=\\\"padding: 9px 10px 5px 10px; flex: 4; margin-right: 15px; border: none;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'Sw'\\\" item-value=\\\"self.getSwParam\\\" params=\\\"pickettIdx\\\"\\n                set-value=\\\"self.setSwParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n        <div class=\\\"fa fa-times delete-button\\\" ng-click=\\\"self.removePickett(pickettIdx)\\\"></div>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/tab9.html?");

/***/ }),

/***/ "./multi-well-crossplot/index.js":
/*!***************************************!*\
  !*** ./multi-well-crossplot/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var componentName = 'multiWellCrossplot';\nmodule.exports.name = componentName;\n__webpack_require__(/*! ./style.less */ \"./multi-well-crossplot/style.less\");\nconst regression = __webpack_require__(/*! ../../bower_components/regression-js/dist/regression.min.js */ \"../bower_components/regression-js/dist/regression.min.js\");\n\nconst _DECIMAL_LEN = 4;\nconst _PICKETT_LIMIT = 5;\n\nvar app = angular.module(componentName, [\n    'sideBar', 'wiTreeView','wiTreeViewVirtual', 'wiTableView',\n    'wiApi', 'editable', \n    'wiDialog',\n    'wiDroppable', 'wiDropdownList', 'angularResizable',\n    'plot-toolkit', \n    'wiLoading', 'line-style'\n]);\napp.component(componentName, {\n    template: __webpack_require__(/*! ./template.html */ \"./multi-well-crossplot/template.html\"),\n    controller: multiWellCrossplotController,\n    controllerAs: 'self',\n    bindings: {\n        token: \"<\",\n        idProject: \"<\",\n        wellSpec: \"<\",\n        zonesetName: \"<\",\n        selectionType: \"=\",\n        selectionValueList: '<',\n        idCrossplot: \"<\",\n        config: '<',\n        printSettings: '<',\n        onSave: '<',\n        onSaveAs: '<',\n        udls: '<',\n        polygons: '<',\n        polygonExclude: '<',\n        regressionType: '<',\n        silent: \"<\",\n        pickettLines: '<',\n        pickettParams: '<',\n        pointSize: '<'\n    },\n    transclude: true\n});\n\nfunction multiWellCrossplotController($scope, $timeout, $element, wiToken, wiApi, wiDialog, wiLoading) {\n    let self = this;\n    self.treeConfig = [];\n    self.silent = true;\n    self.selectedNode = null;\n    self.datasets = {};\n    //--------------\n    $scope.tab = 1;\n    self.selectionTab = self.selectionTab || 'Wells';\n\n    $scope.setTab = function(newTab){\n        $scope.tab = newTab;\n    };\n\n    $scope.isSet = function(tabNum){\n        return $scope.tab === tabNum;\n    };\n    //--------------\n    this.getDataset = function(well) {\n        wiApi.getCachedWellPromise(well.idWell).then((well) => {\n            self.datasets[well] = well.datasets;\n        }).catch(e => console.error(e));\n    }\n\n    function getCurvesInWell(well) {\n        let curves = [];\n        well.datasets.forEach(dataset => {\n            curves.push(...dataset.curves);\n        });\n        return curves;\n    }\n\n    this.$onInit = function () {\n        self.pointSize = self.pointSize || 5;\n        self.isSettingChange = true;\n        self.defaultConfig = self.defaultConfig || {};\n        self.wellSpec = self.wellSpec || [];\n        self.listOverlayLine = self.listOverlayLine || [];\n        self.selectionType = self.selectionType || 'family-group';\n        self.zoneTree = [];\n        self.zonesetName = self.zonesetName || \"ZonationAll\";\n        self.config = self.config || {grid:true, displayMode: 'bar', colorMode: 'zone', stackMode: 'well', binGap: 5, title: self.title || ''};\n        self.printSettings = self.printSettings || {orientation: 'portrait', aspectRatio: '16:9', alignment: 'left', border: false,\n            width: 210,\n            vMargin: 0,\n            hMargin: 0\n        };\n        self.udls = self.udls || [];\n        self.polygons = self.polygons || [];\n        self.polygonExclude = self.polygonExclude || false;\n        self.selectionValueList = self.selectionValueList || self.initSelectionValueList();\n        self.selectionValueList.forEach(s => {\n            setOnChangeFn(s);\n        })\n        self.statisticHeaders = ['X-Axis','Y-Axis','Z1-Axis','Z2-Axis','Z3-Axis','Points','Correlation'];\n        self.statisticHeaderMasks = [true,true, self.getSelectionValue('Z1').isUsed, self.getSelectionValue('Z2').isUsed, self.getSelectionValue('Z3').isUsed,true,true];\n        self.regressionType = self.regressionType || 'Linear';\n        getRegressionTypeList();\n        self.pickettParams = self.pickettParams || {rw: 0.03, m: 2, n: 2, a: 1};\n\n        if (self.token)\n            wiToken.setToken(self.token);\n        $timeout(() => {\n            $scope.$watch(() => (self.pickettParams), () => {\n                if (self.pickettLines) {\n                    self.pickettLines = self.pickettLines.map(p => ({...p, ...self.pickettParams}));\n                }\n            })\n            $scope.$watch(() => self.config, (newVal, oldVal) => {\n                self.isSettingChange = true;\n            }, true)\n            $scope.$watch(() => self.zonesetName, (newVal, oldVal) => {\n                self.isSettingChange = true;\n            })\n            $scope.$watch(() => (self.wellSpec.map(wsp => wsp.discriminator)), () => {\n                self.isSettingChange = true;\n            }, true)\n            $scope.$watch(() => (self.wellSpec.map(wsp => wsp.idWell)), () => {\n                self.isSettingChange = true;\n                getTree();\n            }, true);\n            $scope.$watch(() => {\n                return self.wellSpec.map(wsp => {\n                    return `${wsp.xAxis ? wsp.xAxis.idCurve : ''}-\n                        ${wsp.yAxis ? wsp.yAxis.idCurve : ''}-\n                        ${wsp.z1Axis ? wsp.z1Axis.idCurve : ''}-\n                        ${wsp.z2Axis ? wsp.z2Axis.idCurve : ''}-\n                        ${wsp.z3Axis ? wsp.z3Axis.idCurve : ''}`;\n                }).join('');\n            }, () => {\n                self.isSettingChange = true;\n            }, true);\n            $scope.$watch(() => (self.selectionType), (newVal, oldVal) => {\n                self.isSettingChange = true;\n                getSelectionList(self.selectionType, self.treeConfig);\n                updateDefaultConfig();\n                if (newVal != oldVal) {\n                    self.selectionValueList.forEach(s => {\n                        s.value = self.selectionList[0].properties.name;\n                    })\n                }\n            });\n            $scope.$watch(() => {\n                return `${JSON.stringify(self.selectionValueList)}`;\n            }, () => {\n                self.isSettingChange = true;\n                updateDefaultConfig();\n                self.updateShowZStats();\n            });\n            $scope.$watch(() => (self.treeConfig.map(w => w.idWell)), () => {\n                getSelectionList(self.selectionType, self.treeConfig);\n                getZonesetsFromWells(self.treeConfig);\n                updateDefaultConfig();\n            }, true);\n            $scope.$watch(() => `${self.regressionType}-${self.polygonExclude}-${JSON.stringify(self.polygons)}`, () => {\n                self.layers.forEach(l => {\n                    self.updateRegressionLine(l, self.regressionType, self.polygons);\n                })\n            })\n        }, 700);\n\n        $scope.vPadding = 50;\n        $scope.hPadding = 60;\n    }\n\n    this.eqnOffsetY = function($index) {\n        return `calc(${$index * 100}% + ${$scope.vPadding}px)`;\n    }\n\n    self.updateShowZStats = function() {\n        let z1Idx = self.statisticHeaders.indexOf('z1Axis');\n        let z2Idx = self.statisticHeaders.indexOf('z2Axis');\n        let z3Idx = self.statisticHeaders.indexOf('z3Axis');\n        self.statisticHeaderMasks[z1Idx] = self.getSelectionValue('Z1').isUsed;\n        self.statisticHeaderMasks[z2Idx] = self.getSelectionValue('Z2').isUsed;\n        self.statisticHeaderMasks[z3Idx] = self.getSelectionValue('Z3').isUsed;\n    }\n    self.statsValue = function ([row, col]) {\n        let statsArray = self.layers;\n        try {\n            switch(_headers[col]){\n                case 'X-Axis':\n                    return statsArray[row].curveXInfo || 'N/A';\n                case 'Y-Axis':\n                    return statsArray[row].curveYInfo || 'N/A';\n                case 'Z1-Axis':\n                    return statsArray[row].curveZ1Info || 'N/A';\n                case 'Z2-Axis':\n                    return statsArray[row].curveZ2Info || 'N/A';\n                case 'Z3-Axis':\n                    return statsArray[row].curveZ3Info || 'N/A';\n                case 'Points':\n                    return statsArray[row].numPoints;\n                case 'Correlation':\n                    return statsArray[row].correlation;\n                default:\n                    return \"this default\";\n            }\n        } catch {\n            return 'N/A';\n        }\n    }\n    self.getStatsRowIcons = function(rowIdx) {\n        return ['rectangle'];\n    }\n    self.getStatsIconStyle = function(rowIdx) {\n        return {\n            'background-color': self.layers[rowIdx].layerColor\n        }\n    }\n    this.calcMSE = function(a, b) {\n        let error = 0\n        for (let i = 0; i < a.length; i++) {\n            error += Math.pow((b[i] - a[i]), 2)\n        }\n        return error / a.length\n    }\n    this.calcCorrelation = function(x, y) {\n        let xDeviation = deviation(x);\n        let yDeviation = deviation(y);\n        let num = _.sum(xDeviation.map(function (xi, i) {\n            return xi * yDeviation[i];\n        }));\n        let den = Math.sqrt(_.sum(xDeviation.map(function (xi) {\n            return Math.pow(xi, 2);\n        })) * _.sum(yDeviation.map(function (yi) {\n            return Math.pow(yi, 2);\n        })));\n        return (num / den).toFixed(4);\n        function deviation(x) {\n            var xBar, n, d, i;\n            xBar = _.mean(x);\n            n = x.length;\n            d = new Array(n);\n            for (i = 0; i < n; i++) {\n                d[i] = x[i] - xBar;\n            }\n            return d;\n        };\n    }\n\n    this.initSelectionValueList = () => {\n        let selectionValueList = [{\n            name: 'X',\n            label: 'X Axis',\n            value: 'Slowness',\n            isUsed: true\n        }, {\n            name: 'Y',\n            label: 'Y Axis',\n            value: 'Gamma Ray',\n            isUsed: true\n        }, {\n            name: 'Z1',\n            label: 'Z1 Axis',\n            value: 'Angle'\n        }, {\n            name: 'Z2',\n            label: 'Z2 Axis',\n            value: 'Diameter'\n        }, {\n            name: 'Z3',\n            label: 'Z3 Axis',\n            value: 'Density'\n        }]\n        return selectionValueList;\n    }\n    function setOnChangeFn(obj) {\n        if (!obj.onChange) {\n            obj.onChange = (function(selectedItemProps) {\n                this.value = (selectedItemProps || {}).name;\n            }).bind(obj);\n        }\n    }\n    this.getSelectionValue = (name) => {\n        if (!self.selectionValueList.length) return '';\n        let selectionValue = self.selectionValueList.find(s => {\n            return s.name == name;\n        })\n        return selectionValue;\n    }\n\n    function getSelectionList(selectionType, wellArray) {\n        let selectionHash = {};\n        let allCurves = [];\n        wellArray.forEach(well => {\n            let curvesInWell = getCurvesInWell(well);\n            allCurves.push(...curvesInWell);\n        });\n        switch(selectionType) {\n            case 'curve':\n                allCurves.forEach(curve => {\n                    selectionHash[curve.name] = 1;\n                })\n                break;\n            case 'family': \n                allCurves.forEach(curve => {\n                    let family = wiApi.getFamily(curve.idFamily);\n                    if(family)\n                        selectionHash[family.name] = 1;\n                })\n                break;\n            case 'family-group':\n                allCurves.forEach(curve => {\n                    let family = wiApi.getFamily(curve.idFamily);\n                    if(family)\n                        selectionHash[family.familyGroup] = 1;\n                })\n                break;\n        }\n        self.selectionList = Object.keys(selectionHash).map(item => ({ \n            data:{label:item}, \n            properties:{name:item} \n        }));\n    }\n\n    this.getLabel = function (node) {\n        return node.name;\n    }\n    this.getIcon = function (node) {\n        if (node.idCurve) return 'curve-16x16';\n        if (node.idDataset) return 'curve-data-16x16';\n        if (node.idWell) return 'well-16x16';\n    }\n    this.getChildren = function (node) {\n        if (node.idDataset) {\n            return node.curves;\n        }\n        if (node.idWell) {\n            return node.datasets;\n        }\n        return [];\n    }\n    this.clickFunction = clickFunction;\n    function clickFunction($event, node, selectedObjs, treeRoot) {\n        let wellSpec = self.wellSpec.find(wsp => wsp.idWell === treeRoot.idWell);\n        switch(treeRoot.isSettingAxis) {\n            case 'X':\n                if(node.idDataset != wellSpec.yAxis.idDataset) return;\n                wellSpec.xAxis = {};\n                wellSpec.xAxis.idCurve = node.idCurve;\n                wellSpec.xAxis.idDataset = node.idDataset;\n                break;\n            case 'Y':\n                if(node.idDataset != wellSpec.xAxis.idDataset) return;\n                wellSpec.yAxis = {};\n                wellSpec.yAxis.idCurve = node.idCurve;\n                wellSpec.yAxis.idDataset = node.idDataset;\n                break;\n            case 'Z1':\n                if(node.idDataset != wellSpec.xAxis.idDataset) return;\n                wellSpec.z1Axis = {};\n                wellSpec.z1Axis.idCurve = node.idCurve;\n                wellSpec.z1Axis.idDataset = node.idDataset;\n                break;\n            case 'Z2':\n                if(node.idDataset != wellSpec.xAxis.idDataset) return;\n                wellSpec.z2Axis = {};\n                wellSpec.z2Axis.idCurve = node.idCurve;\n                wellSpec.z2Axis.idDataset = node.idDataset;\n                break;\n            case 'Z3':\n                if(node.idDataset != wellSpec.xAxis.idDataset) return;\n                wellSpec.z3Axis = {};\n                wellSpec.z3Axis.idCurve = node.idCurve;\n                wellSpec.z3Axis.idDataset = node.idDataset;\n                break;\n            default:\n        }\n    }\n    this.refresh = function(){\n        self.isSettingChange = true;\n        self.layers.length = 0;\n        self.treeConfig.length = 0;\n        getTree();\n    };\n    async function getTree(callback) {\n        wiLoading.show($element.find('.main')[0], self.silent);\n        self.treeConfig = [];\n        let promises = [];\n        for (let w of self.wellSpec) {\n            try {\n                let well = await wiApi.getCachedWellPromise(w.idWell || w);\n                well.isSettingAxis = 'X';\n                $timeout(() => {\n                    self.treeConfig.push(well);\n                });\n            }\n            catch(e) {\n                console.error(e);\n            }\n        }\n        if (!$scope.$root.$$phase) $scope.$digest();\n        callback && callback();\n        wiLoading.hide();\n    }\n    function getZonesetsFromWells(wells) {\n        if (!wells.length) return;\n        let zsList;\n        for (let well of wells) {\n            let zonesets = well.zone_sets;\n            if (!zsList) {\n                zsList = angular.copy(zonesets);\n            }\n            else if (zsList.length) {\n                zsList = intersectAndMerge(zsList, zonesets);\n            }\n            else {\n                break;\n            }\n        }\n        self.zonesetList = (zsList || []).map( zs => ({\n            data: {\n                label: zs.name\n            },\n            properties: zs\n        }));\n        self.zonesetList.splice(0, 0, {data: {label: 'ZonationAll'}, properties: genZonationAllZS(0, 1)});\n        let selectedZonesetProps = (self.zonesetList.find(zs => zs.properties.name === self.zonesetName) || {}).properties;\n        if (!selectedZonesetProps) return;\n        self.onZonesetSelectionChanged(selectedZonesetProps);\n        if (!$scope.$root.$$phase) $scope.$digest();\n    }\n    function intersectAndMerge(dstZoneList, srcZoneList) {\n        return dstZoneList.filter(zs => {\n            let zoneset = srcZoneList.find(zs1 => zs.name === zs1.name);\n            if (!zoneset) return false;\n            for (let z of zoneset.zones) {\n                let zone = zs.zones.find(zo => zo.zone_template.name == z.zone_template.name);\n                if (!zone) {\n                    zs.zones.push(angular.copy(z));\n                }\n            }\n            return true;\n        });\n    }\n    self.getAxisKey = function(isSettingAxis) {\n        switch(isSettingAxis) {\n            case 'X':\n                return 'xAxis';\n            case 'Y':\n                return 'yAxis';\n            case 'Z1':\n                return 'z1Axis';\n            case 'Z2':\n                return 'z2Axis';\n            case 'Z3':\n                return 'z3Axis';\n            default:\n        }\n    }\n    this.getCurve = getCurve;\n    function getCurve(well, requiredAxis) {\n        let wellSpec = getWellSpec(well);\n        if (!Object.keys(wellSpec).length) return {};\n        let axis = requiredAxis || self.getAxisKey(well.isSettingAxis);\n        let curves = getCurvesInWell(well).filter(c => self.runWellMatch(c, self.getFilterForWell(axis)));\n        let curve = wellSpec[axis] && wellSpec[axis].idCurve ? (curves.find(c => c.idCurve === wellSpec[axis].idCurve) || curves[0]) : curves[0];\n        if (!curve) {\n            wellSpec[axis] = {};\n            return;\n        }\n        if (wellSpec[axis] == undefined) wellSpec[axis] = {};\n        wellSpec[axis].curveName = curve.name;\n        wellSpec[axis].idCurve = curve.idCurve;\n        wellSpec[axis].idDataset = curve.idDataset;\n\n        let datasets = self.getChildren(well);\n        let dataset = wellSpec[axis] && wellSpec[axis].idDataset ? datasets.find(ds => ds.idDataset === wellSpec[axis].idDataset):datasets[0];\n        wellSpec[axis].datasetName = dataset.name;\n        wellSpec[axis].datasetTop = parseFloat(dataset.top);\n        wellSpec[axis].datasetBottom = parseFloat(dataset.bottom);\n        wellSpec[axis].datasetStep = parseFloat(dataset.step);\n        return curve;\n    }\n    const EMPTY_ARRAY = []\n    this.noChildren = function (node) {\n        return EMPTY_ARRAY;\n    }\n\n    // ---CONFIG---\n    this.getConfigLeft = function() {\n        self.config = self.config || {};\n        return isNaN(self.config.left) ? \"[empty]\": wiApi.bestNumberFormat(self.config.left, 3);\n    }\n    this.getConfigLimitTop = function () {\n        self.config = self.config || {};\n        return isNaN(self.config.limitTop) ? \"[empty]\": wiApi.bestNumberFormat(self.config.limitTop, 3);\n    }\n    this.getConfigLimitBottom = function () {\n        self.config = self.config || {};\n        return isNaN(self.config.limitBottom) ? \"[empty]\": wiApi.bestNumberFormat(self.config.limitBottom, 3);\n    }\n    this.setConfigLimitTop = function (notUse, newValue) {\n        self.config.limitTop = parseFloat(newValue)\n    }\n    this.setConfigLimitBottom = function (notUse, newValue) {\n        self.config.limitBottom = parseFloat(newValue)\n    }\n    this.setConfigLeft = function(notUse, newValue) {\n        self.config.left = parseFloat(newValue);\n    }\n    this.getConfigRight = function() {\n        self.config = self.config || {};\n        return isNaN(self.config.right) ? \"[empty]\": wiApi.bestNumberFormat(self.config.right, 3);\n    }\n    this.setConfigRight = function(notUse, newValue) {\n        self.config.right = parseFloat(newValue);\n    }\n    this.getConfigMajorX = function() {\n        self.config = self.config || {};\n        return isNaN(self.config.majorX) ? \"[empty]\": wiApi.bestNumberFormat(self.config.majorX, 3);\n    }\n    this.setConfigMajorX = function(notUse, newValue) {\n        self.config.majorX = parseFloat(newValue);\n    }\n    this.getConfigMajorY = function() {\n        self.config = self.config || {};\n        return isNaN(self.config.majorY) ? \"[empty]\": wiApi.bestNumberFormat(self.config.majorY, 3);\n    }\n    this.setConfigMajorY = function(notUse, newValue) {\n        self.config.majorY = parseFloat(newValue);\n    }\n    this.getConfigMinorX = function() {\n        self.config = self.config || {};\n        return isNaN(self.config.minorX) ? \"[empty]\": wiApi.bestNumberFormat(self.config.minorX, 3);\n    }\n    this.setConfigMinorX = function(notUse, newValue) {\n        self.config.minorX = parseFloat(newValue);\n    }\n    this.getConfigMinorY = function() {\n        self.config = self.config || {};\n        return isNaN(self.config.minorY) ? \"[empty]\": wiApi.bestNumberFormat(self.config.minorY, 3);\n    }\n    this.setConfigMinorY = function(notUse, newValue) {\n        self.config.minorY = parseFloat(newValue);\n    }\n    this.getConfigTop = function() {\n        self.config = self.config || {};\n        return isNaN(self.config.top) ? \"[empty]\": wiApi.bestNumberFormat(self.config.top, 3);\n    }\n    this.setConfigTop = function(notUse, newValue) {\n        self.config.top = parseFloat(newValue);\n    }\n    this.getConfigBottom = function() {\n        self.config = self.config || {};\n        return isNaN(self.config.bottom) ? \"[empty]\": wiApi.bestNumberFormat(self.config.bottom, 3);\n    }\n    this.setConfigBottom = function(notUse, newValue) {\n        self.config.bottom = parseFloat(newValue);\n    }\n    this.getConfigTitle = function() {\n        self.config = self.config || {};\n        return (self.config.title || \"\").length ? self.config.title : \"New Crossplot\";\n    }\n    this.setConfigTitle = function(notUse, newValue) {\n        self.config.title = newValue;\n    }\n    this.getConfigXLabel = function() {\n        self.config = self.config || {};\n        return (self.config.xLabel || \"\").length ? self.config.xLabel : ((self.getSelectionValue('X')||{}).value || '[Unknown]');\n    }\n    this.setConfigXLabel = function(notUse, newValue) {\n        self.config.xLabel = newValue;\n    }\n    this.getConfigYLabel = function() {\n        self.config = self.config || {};\n        return (self.config.yLabel || \"\").length ? self.config.yLabel : ((self.getSelectionValue('Y') || {}).value || '[Unknown]');\n    }\n    this.setConfigYLabel = function(notUse, newValue) {\n        self.config.yLabel = newValue;\n    }\n    this.setZ1Min = function(notUse, newValue) {\n        self.config.z1Min = parseFloat(newValue);\n    }\n    this.setZ1Max = function(notUse, newValue) {\n        self.config.z1Max = parseFloat(newValue);\n    }\n    this.setZ1N = function(notUse, newValue) {\n        self.config.z1N = parseFloat(newValue);\n    }\n    this.setZ2Min = function(notUse, newValue) {\n        self.config.z2Min = parseFloat(newValue);\n    }\n    this.setZ2Max = function(notUse, newValue) {\n        self.config.z2Max = parseFloat(newValue);\n    }\n    this.setZ2N = function(notUse, newValue) {\n        self.config.z2N = parseFloat(newValue);\n    }\n    this.setZ3Min = function(notUse, newValue) {\n        self.config.z3Min = parseFloat(newValue);\n    }\n    this.setZ3Max = function(notUse, newValue) {\n        self.config.z3Max = parseFloat(newValue);\n    }\n    this.setZ3N = function(notUse, newValue) {\n        self.config.z3N = parseFloat(newValue);\n    }\n    this.getZ1Min = () => (isNaN(self.config.z1Min) ? (isNaN(self.defaultConfig.z1Min) ? '[empty]' : self.defaultConfig.z1Min) : self.config.z1Min)\n    this.getZ1Max = () => (isNaN(self.config.z1Max) ? (isNaN(self.defaultConfig.z1Max) ? '[empty]' : self.defaultConfig.z1Max) : self.config.z1Max)\n    this.getZ1N = () => (isNaN(self.config.z1N) ? (isNaN(self.defaultConfig.z1N) ? '[empty]' : self.defaultConfig.z1N) : self.config.z1N)\n    this.getZ2Min = () => (isNaN(self.config.z2Min) ? (isNaN(self.defaultConfig.z2Min) ? '[empty]' : self.defaultConfig.z2Min) : self.config.z2Min)\n    this.getZ2Max = () => (isNaN(self.config.z2Max) ? (isNaN(self.defaultConfig.z2Max) ? '[empty]' : self.defaultConfig.z2Max) : self.config.z2Max)\n    this.getZ2N = () => (isNaN(self.config.z2N) ? (isNaN(self.defaultConfig.z2N) ? '[empty]' : self.defaultConfig.z2N) : self.config.z2N)\n    this.getZ3Min = () => (isNaN(self.config.z3Min) ? (isNaN(self.defaultConfig.z3Min) ? '[empty]' : self.defaultConfig.z3Min) : self.config.z3Min)\n    this.getZ3Max = () => (isNaN(self.config.z3Max) ? (isNaN(self.defaultConfig.z3Max) ? '[empty]' : self.defaultConfig.z3Max) : self.config.z3Max)\n    this.getZ3N = () => (isNaN(self.config.z3N) ? (isNaN(self.defaultConfig.z3N) ? '[empty]' : self.defaultConfig.z3N) : self.config.z3N)\n    this.getTop = () => (isNaN(self.config.top) ? (self.defaultConfig.top || 0) : self.config.top)\n    this.getBottom = () => (isNaN(self.config.bottom) ? (self.defaultConfig.bottom || 0) : self.config.bottom)\n    this.getLeft = () => (isNaN(self.config.left) ? (self.defaultConfig.left || 0) : self.config.left)\n    this.getRight = () => (isNaN(self.config.right) ? (self.defaultConfig.right || 0) : self.config.right)\n    this.getMajorX = () => ( self.config.majorX || self.defaultConfig.majorX || 5 )\n    this.getMajorY = () => ( self.config.majorY || self.defaultConfig.majorY || 5 )\n    this.getMinorX = () => ( self.config.minorX || self.defaultConfig.minorX || 1 )\n    this.getMinorY = () => ( self.config.minorY || self.defaultConfig.minorY || 1 )\n    this.getLogaX = () => (self.config.logaX || self.defaultConfig.logaX || 0)\n    this.getLogaY = () => (self.config.logaY || self.defaultConfig.logaY || 0)\n    this.getColorMode = () => (self.config.colorMode || self.defaultConfig.colorMode || 'zone')\n    this.getColor = (zone, well) => {\n        let cMode = self.getColorMode();\n        return cMode === 'zone' ? zone.zone_template.background:(cMode === 'well'?well.color:'red');\n    }\n    this.getPointSize = () => (self.pointSize);\n    this.setPointSize = (notUse, newVal) => {\n        self.isSettingChange = true;\n        self.pointSize = parseFloat(newVal);\n    }\n\n    // ---DEFAULT CONFIG\n    function clearDefaultConfig() {\n        self.defaultConfig = {};\n    }\n    function updateDefaultConfig() {\n        clearDefaultConfig();\n        self.selectionValueList.forEach(s => {\n            if (s.isUsed) {\n                setDefaultConfig(self.getAxisKey(s.name), 0);\n            }\n        })\n\n        //overlay line---------------------------------------------------\n        if(self.treeConfig.length){\n            let well = self.treeConfig[0];\n            let curveX = self.getCurve(well, 'xAxis');\n            let curveY = self.getCurve(well, 'yAxis');\n            if(curveX && curveY && curveX.idCurve && curveY.idCurve){\n                wiApi.getOverlayLinesPromise(curveX.idCurve, curveY.idCurve).then((data) => {\n                    $timeout(()=>{\n                        self.listOverlayLine = data;\n                    })\n                }).catch((err) => {\n                    console.error(err);\n                })\n            }\n        }\n        //END overlay line---------------------------------------------------\n\n        function setDefaultConfig(axis, index) {\n            if (index >= self.treeConfig.length) return;\n            let curve = getCurve(self.treeConfig[index], axis);\n            if (!curve) {\n                setDefaultConfig(axis, index + 1);\n            } else {\n                let family = wiApi.getFamily(curve.idFamily);\n                if (!family) return;\n                switch (axis) {\n                    case 'xAxis':\n                        self.setConfigXLabel(null, self.getSelectionValue('X').value);\n                        self.defaultConfig.left = family.family_spec[0].minScale;\n                        self.defaultConfig.right = family.family_spec[0].maxScale;\n                        self.defaultConfig.logaX = family.family_spec[0].displayType.toLowerCase() === 'logarithmic';\n                        break;\n                    case 'yAxis':\n                        self.setConfigYLabel(null, self.getSelectionValue('Y').value);\n                        self.defaultConfig.top = family.family_spec[0].maxScale;\n                        self.defaultConfig.bottom = family.family_spec[0].minScale;\n                        self.defaultConfig.logaY = family.family_spec[0].displayType.toLowerCase() === 'logarithmic';\n                        break;\n                    case 'z1Axis':\n                        self.config.z1Max = family.family_spec[0].maxScale;\n                        self.config.z1Min = family.family_spec[0].minScale;\n                        self.config.z1N = 5;\n                        break;\n                    case 'z2Axis':\n                        self.config.z2Max = family.family_spec[0].maxScale;\n                        self.config.z2Min = family.family_spec[0].minScale;\n                        self.config.z2N = 5;\n                        break;\n                    case 'z3Axis':\n                        self.config.z3Max = family.family_spec[0].maxScale;\n                        self.config.z3Min = family.family_spec[0].minScale;\n                        self.config.z3N = 5;\n                        break;\n                    default:\n                }\n            }\n        }\n    }\n\n    function genZonationAllZS(top, bottom, color = 'blue') {\n        return {\n            name: 'ZonationAll',\n            zones: [{\n                startDepth: top,\n                endDepth: bottom,\n                zone_template: {\n                    name: 'ZonationAll',\n                    background: color\n                }\n            }]\n        }\n    }\n\n    function filterData(curveData, zone) {\n        return curveData.filter(d => ((zone.startDepth - d.depth)*(zone.endDepth - d.depth) <= 0));\n    }\n\n    // ---ASSET\n    this.saveToAsset = function() {\n        let type = 'CROSSPLOT';\n        let content = {\n            wellSpec: self.wellSpec,\n            zonesetName: self.zonesetName,\n            selectionType: self.selectionType,\n            selectionValueList: self.selectionValueList,\n            udls: self.udls,\n            polygons: self.polygons,\n            polygonExclude: self.polygonExclude,\n            regressionType: self.regressionType,\n            config: self.config,\n            pickettLines: self.pickettLines,\n            pickettParams: self.pickettParams,\n            pointSize: self.pointSize\n        }\n        if (!self.idCrossplot) {\n            wiDialog.promptDialog({\n                title: 'New Crossplot',\n                inputName: 'Crossplot Name',\n                input: self.getConfigTitle(),\n            }, function(name) {\n                content.config.title = name;\n                wiLoading.show($element.find('.main')[0],self.silent);\n                wiApi.newAssetPromise(self.idProject, name, type, content).then(res => {\n                    self.setConfigTitle(null, name);\n                    self.idCrossplot = res.idParameterSet;\n                    wiLoading.hide();\n                    self.onSave && self.onSave(res);\n                })\n                    .catch(e => {\n                        console.error(e);\n                        wiLoading.hide();\n                        self.saveToAsset();\n                    })\n            });\n        } else {\n            wiLoading.show($element.find('.main')[0],self.silent);\n            content.idParameterSet = self.idParameterSet;\n            wiApi.editAssetPromise(self.idCrossplot, content).then(res => {\n                wiLoading.hide();\n            })\n                .catch(e => {\n                    wiLoading.hide();\n                    console.error(e);\n                });\n        }\n    }\n    this.saveAs = function() {\n        console.log(\"saveAs\");\n        wiDialog.promptDialog({\n            title: 'Save As Crossplot',\n            inputName: 'Crossplot Name',\n            input: '',\n        }, function(name) {\n            let type = 'CROSSPLOT';\n            let content = {\n                wellSpec: self.wellSpec,\n                zonesetName: self.zonesetName,\n                selectionType: self.selectionType,\n                selectionValueList: self.selectionValueList,\n                udls: self.udls,\n                polygons: self.polygons,\n                polygonExclude: self.polygonExclude,\n                regressionType: self.regressionType,\n                config: {...self.config, title: name},\n                pickettLines: self.pickettLines,\n                pickettParams: self.pickettParams,\n                pointSize: self.pointSize\n            }\n            wiApi.newAssetPromise(self.idProject, name, type, content).then(res => {\n                self.idCrossplot = res.idParameterSet;\n                console.log(res);\n                self.onSaveAs && self.onSaveAs(res);\n            })\n                .catch(e => {\n                    console.error(e);\n                    self.saveAs();\n                })\n        });\n    }\n\n    // ---ZONE\n    let _zoneNames = []\n    self.getZoneNames = function() {\n        _zoneNames.length = 0;\n        Object.assign(_zoneNames, self.layers.map(bins => bins.name));\n        return _zoneNames;\n    }\n    let _headers = [];\n    self.getHeaders = function (){\n        _headers.length = 0;\n        Object.assign(_headers, self.statisticHeaders.filter((item, idx) => self.statisticHeaderMasks[idx]));\n        return _headers;\n    }\n    this.hideSelectedZone = function() {\n        if(!self.selectedZones) return;\n        let _notUsed = true;\n        self.selectedZones.forEach(layer => {\n            layer._notUsed = true;\n            self.onUseZoneChange(layer);\n        });\n    }\n    this.showSelectedZone = function() {\n        if(!self.selectedZones) return;\n        self.selectedZones.forEach(layer => {\n            layer._notUsed = false;\n            self.onUseZoneChange(layer);\n        });\n        $timeout(() => {});\n    }\n    this.hideAllZone = function() {\n        self.zoneTree.forEach(bins => {\n            bins._notUsed = true;\n            self.onUseZoneChange(bins);\n        });\n        $timeout(() => {});\n    }\n    this.showAllZone = function() {\n        self.zoneTree.forEach(bins => {\n            bins._notUsed = false\n            self.onUseZoneChange(bins);\n        });\n        $timeout(() => {});\n    }\n    self._hiddenZone = [];\n    this.getHiddenZone = function() {\n        return self._hiddenZone;\n    }\n    this.getZoneIcon = (node) => ( (node && !node._notUsed) ? 'zone-16x16': 'fa fa-eye-slash' )\n    this._notUsedLayer = [];\n    this.click2ToggleZone = function ($event, node, selectedObjs) {\n        node._notUsed = !node._notUsed;\n        self.onUseZoneChange(node);\n        self.selectedZones = Object.values(selectedObjs).map(o => o.data);\n    }\n    this.onUseZoneChange = (node) => {\n        if (node._notUsed) {\n            while(layer = self.layers.find(layer => {\n                return layer.zone == node.zone_template.name;\n            })) {\n                self._notUsedLayer.push(layer);\n                self.layers.splice(self.layers.indexOf(layer), 1);\n            }\n        } else {\n            let layers = self._notUsedLayer.filter(layer => {\n                return layer.zone == node.zone_template.name;\n            })\n            self.layers = self.layers.concat(layers);\n            self._notUsedLayer = self._notUsedLayer.filter(l => {\n                return l.zone != node.zone_template.name;\n            })\n        }\n    }\n    function getZoneset(well, zonesetName = \"\") {\n        let zonesets = well.zone_sets;\n        if (zonesetName === \"\" || zonesetName === \"ZonationAll\") \n            return null;\n        return zonesets.find(zs => zs.name === zonesetName);\n    }\n    this.onZonesetSelectionChanged = function(selectedItemProps) {\n        self.zoneTree = (selectedItemProps || {}).zones;\n        self.zonesetName = (selectedItemProps || {}).name || 'ZonationAll';\n    }\n    this.runZoneMatch = function (node, criteria) {\n        let keySearch = criteria.toLowerCase();\n        let searchArray = node.zone_template.name.toLowerCase();\n        return searchArray.includes(keySearch);\n    }\n    this.getZoneLabel = function (node) {\n        if(!node || !node.zone_template){\n            return 'aaa';\n        }\n        return node.zone_template.name;\n    }\n\n    // ---WELL\n    this.getWellSpec = getWellSpec;\n    function getWellSpec(well) {\n        if (!well) return {};\n        return self.wellSpec.find(wsp => wsp.idWell === well.idWell);\n    }\n    this.onDrop = function (event, helper, myData) {\n        let idWells = helper.data('idWells');\n        if (idWells && idWells.length) {\n            $timeout(() => {\n                for (let idWell of idWells) {\n                    wiApi.getCachedWellPromise(idWell).then((well) => {\n                        let zonesets = well.zone_sets;\n                        let hasZonesetName = self.zonesetName != 'ZonationAll' ? zonesets.some(zs => {\n                            zs.name == self.zonesetName;\n                        }) : true;\n                        $timeout(() => {\n                            if (!self.wellSpec.find(wsp => wsp.idWell === idWell) && hasZonesetName) {\n                                self.wellSpec.push({idWell});\n                            } else if (!hasZonesetName) {\n                                toastr.error(`User dataset do not have ${self.zonesetName}`);\n                            }\n                        })\n                    }).catch(e => console.error(e));\n                }\n            })\n        }\n\n    }\n\n    this.getOvlLabel = function(node){\n        return node.name;\n    }\n    this.getOvlIcon = function (node){\n        return (node && !node._used) ? 'fa fa-eye-slash': 'blue-color fa fa-eye';\n    }\n    this.getOvlChildren = function (node){\n        return [];\n    }\n    this.runOvlMatch = function (node, keysearch){\n        return node.name.toLowerCase().includes(keysearch.toLowerCase());\n    }\n    this.clickOvlFunction = function (event, node){\n        // console.log(node);\n        self.listOverlayLine.forEach((item)=>{\n            item._used = false;\n        });\n        node._used = true;\n\n        wiApi.getOverlayLinePromise(node.idOverlayLine).then((ovlProps) => {\n            $timeout(() => {\n                self.overlayLineSpec = ovlProps.data;\n            })\n        }).catch((err) => {\n            console.error(err);\n        })\n    }\n    this.toggleWell = function(well) {\n        well._notUsed = !well._notUsed;\n    }\n    this.removeWell = function(well) {\n        let index = self.wellSpec.findIndex(wsp => wsp.idWell === well.idWell);\n        if(index >= 0) {\n            self.wellSpec.splice(index, 1);\n        }\n    }\n    this.getFilterForWell = (axis) => {\n        switch(axis) {\n            case 'xAxis':\n                return self.getSelectionValue('X').value;\n            case 'yAxis':\n                return self.getSelectionValue('Y').value;\n            case 'z1Axis':\n                return self.getSelectionValue('Z1').value;\n            case 'z2Axis':\n                return self.getSelectionValue('Z2').value;\n            case 'z3Axis':\n                return self.getSelectionValue('Z3').value;\n            default:\n        }\n    }\n    this.runWellMatch = function (node, criteria) {\n        let family;\n        if (!criteria) return true;\n        switch(self.selectionType) {\n            case 'family-group': \n                family = wiApi.getFamily(node.idFamily);\n                if (!family) return null;\n                return family.familyGroup.trim().toLowerCase() === criteria.trim().toLowerCase();\n\n            case 'family': \n                family = wiApi.getFamily(node.idFamily);\n                if (!family) return null;\n                return family.name.trim().toLowerCase() === criteria.trim().toLowerCase();\n\n            case 'curve':\n                return node.name.trim().toLowerCase() === criteria.trim().toLowerCase();\n        }\n    }\n\n    // ---POLYGON---\n    this.currentPolygon = {};\n    this.addPolygon = function() {\n        let polygon = {};\n        polygon.label = 'New polygon';\n        polygon.mode = 'edit';\n        polygon._notUsed = false;\n        polygon._notShow = false;\n        polygon.exclude = true;\n        polygon.points = [];\n        Object.assign(self.currentPolygon, polygon);\n        self.polygons.forEach(p => {\n            p.mode = null;\n        })\n        self.polygons.push(polygon);\n    }\n    this.removePolygon = ($index) => {\n        self.polygons.splice($index, 1);\n    }\n    this.filterByPolygons = function(polygons, data, exclude) {\n        let ppoints = polygons.map(function(p) {\n            return p.points.map(function(point) {\n                return [point.x, point.y];\n            });\n        });\n\n        return data.filter(function(d) {\n            let pass = exclude ? false : true;\n            for (let p of ppoints)\n                if (d3.polygonContains(p, d))\n                    return pass;\n            return !pass;\n        });\n    }\n    this.setPolygonLabel = function($index, newLabel) {\n        self.polygons[$index].label = newLabel;\n    }\n    this.toggleEditPolygon = function(polygon) {\n        let idx = self.polygons.indexOf(polygon);\n        self.polygons.forEach((p, i) => {\n            if (i != idx) p.mode = null;\n        })\n        if (polygon.mode == 'edit') {\n            polygon.mode = null;\n        } else {\n            polygon._notShow = false;\n            polygon.mode = 'edit';\n        }\n    }\n\n    // ---UDL\n    this.addUDL = function() {\n        let udl = {};\n        udl.text = \"\";\n        setUDLFn(udl);\n        udl.latex = \"\";\n        udl.lineStyle = {\n            lineColor: colorGenerator(),\n            lineWidth: 1,\n            lineStyle: [10, 0]\n        };\n        self.udls.push(udl);\n    }\n    function normalizeFormation(text) {\n        return text.replace(/\\+-/g, '-').replace(/--/g, '+');\n    }\n    function setUDLFn(udl) {\n        if (!udl.fn) {\n            udl.fn = (function(x) {\n                //this.value = (selected;ItemProps || {}).name;\n                return eval(this.text);\n            }).bind(udl);\n        }\n    }\n    this.getRwParam = function(index) {\n        return self.pickettParams.rw || '[empty]';\n    }\n    this.setRwParam = function(index, newValue) {\n        self.pickettParams.rw = newValue;\n    }\n    this.getAParam = function(index) {\n        return self.pickettParams.a || '[empty]';\n    }\n    this.setAParam = function(index, newValue) {\n        self.pickettParams.a = newValue;\n    }\n    this.getMParam = function(index) {\n        return self.pickettParams.m || '[empty]';\n    }\n    this.setMParam = function(index, newValue) {\n        self.pickettParams.m = newValue;\n    }\n    this.getNParam = function(index) {\n        return self.pickettParams.n || '[empty]';\n    }\n    this.setNParam = function(index, newValue) {\n        self.pickettParams.n = newValue;\n    }\n    this.getSwParam = function(index) {\n        return self.pickettLines[index].sw || '[empty]';\n    }\n    this.setSwParam = function(index, newValue) {\n        self.pickettLines[index].sw = newValue;\n        self.pickettLines[index].label = `Sw = ${newValue}`;\n    }\n    this.getFnUDL = function(index) {\n        return (self.udls[index].text || '').length ? self.udls[index].text : '[empty]';\n    }\n    this.setFnUDL = function(index, newValue) {\n        self.udls[index].text = newValue;\n        self.udls[index].latex = normalizeFormation(`y = ${newValue}`);\n    }\n    this.getLineStyleUDL = function(index) {\n        return (self.udls[index].text || '').length ? self.udls[index].text : '[empty]';\n    }\n    this.setLineStyleUDL = function(index, newValue) {\n        self.udls[index].text = newValue;\n    }\n    this.getLineWidthUDL = function(index) {\n        return (self.udls[index].text || '').length ? self.udls[index].text : '[empty]';\n    }\n    this.setLineWidthUDL = function(index, newValue) {\n        self.udls[index].text = newValue;\n    }\n    this.getLineColorUDL = function(index) {\n        return (self.udls[index].text || '').length ? self.udls[index].text : '[empty]';\n    }\n    this.setLineColorUDL = function(index, newValue) {\n        self.udls[index].text = newValue;\n    }\n    this.removeUDL = ($index) => {\n        self.udls.splice($index, 1);\n    }\n\n    // ---LAYER\n    this.layers = [];\n    this.genLayers = async function() {\n        if (!self.isSettingChange) return;\n        if (!self.getSelectionValue('X').value || !self.getSelectionValue('Y').value) return;\n        if (!self.getConfigXLabel() || !self.getConfigYLabel()) return;\n        self.isSettingChange = false;\n        self.layers = self.layers || []\t;\n        let layers = [];\n        let _notUsedLayer = [];\n        let shouldPlotZ1 = self.getSelectionValue('Z1').isUsed;\n        let shouldPlotZ2 = self.getSelectionValue('Z2').isUsed;\n        let shouldPlotZ3 = self.getSelectionValue('Z3').isUsed;\n        wiLoading.show($element.find('.main')[0],self.silent);\n        for (let i =0; i < self.treeConfig.length; i++) {\n            let well = self.treeConfig[i];\n            if (well._notUsed) {\n                continue;\n            }\n            let curveX = self.getCurve(well, 'xAxis');\n            let curveY = self.getCurve(well, 'yAxis');\n            let curveZ1 = shouldPlotZ1 ? self.getCurve(well, 'z1Axis') : null;\n            let curveZ2 = shouldPlotZ2 ? self.getCurve(well, 'z2Axis') : null;\n            let curveZ3 = shouldPlotZ3 ? self.getCurve(well, 'z3Axis') : null;\n            if (!curveX || !curveY) {\n                continue;\n            }\n            let datasetTopX = self.wellSpec[i].xAxis.datasetTop;\n            let datasetBottomX = self.wellSpec[i].xAxis.datasetBottom;\n            let datasetStepX = self.wellSpec[i].xAxis.datasetStep;\n            let datasetX = well.datasets.find(ds => ds.idDataset === self.wellSpec[i].xAxis.idDataset);\n\n            let datasetTopY = self.wellSpec[i].yAxis.datasetTop;\n            let datasetBottomY = self.wellSpec[i].yAxis.datasetBottom;\n            let datasetStepY = self.wellSpec[i].yAxis.datasetStep;\n            let datasetY = well.datasets.find(ds => ds.idDataset === self.wellSpec[i].yAxis.idDataset);\n\n            let zoneset = getZoneset(well, self.zonesetName);\n            zoneset = zoneset || genZonationAllZS(d3.max([datasetTopX, datasetTopY]), d3.min([datasetBottomX, datasetBottomY]), well.color)\n\n            let curveDataX = await wiApi.getCachedCurveDataPromise(curveX.idCurve);\n            if (self.hasDiscriminator(well)) {\n                let discriminatorCurve = await wiApi.evalDiscriminatorPromise(datasetX, self.wellSpec[i].discriminator);\n                curveDataX = curveDataX.filter((d, idx) => discriminatorCurve[idx]);\n            }\n            let curveDataY = await wiApi.getCachedCurveDataPromise(curveY.idCurve);\n            if (self.hasDiscriminator(well)) {\n                let discriminatorCurve = await wiApi.evalDiscriminatorPromise(datasetY, self.wellSpec[i].discriminator);\n                curveDataY = curveDataY.filter((d, idx) => discriminatorCurve[idx]);\n            }\n            let curveDataZ1 = null;\n            let curveDataZ2 = null;\n            let curveDataZ3 = null;\n            let datasetZ1 = null;\n            let datasetZ2 = null;\n            let datasetZ3 = null;\n            if (shouldPlotZ1 && curveZ1) {\n                datasetZ1 = well.datasets.find(ds => ds.idDataset === self.wellSpec[i].z1Axis.idDataset);\n                self.zColors = zColorsFn(self.getZ1N(), curveZ1.idCurve);\n                curveDataZ1 = await wiApi.getCachedCurveDataPromise(curveZ1.idCurve);\n                if (self.hasDiscriminator(well)) {\n                    let discriminatorCurve = await wiApi.evalDiscriminatorPromise(datasetZ1, self.wellSpec[i].discriminator);\n                    curveDataZ1 = curveDataZ1.filter((d, idx) => discriminatorCurve[idx]);\n                }\n            }\n            if (shouldPlotZ2 && curveZ2) {\n                datasetZ2 = well.datasets.find(ds => ds.idDataset === self.wellSpec[i].z2Axis.idDataset);\n                self.zSizes = zSizesFn(self.getZ2N(), curveZ2.idCurve);\n                curveDataZ2 = await wiApi.getCachedCurveDataPromise(curveZ2.idCurve);\n                if (self.hasDiscriminator(well)) {\n                    let discriminatorCurve = await wiApi.evalDiscriminatorPromise(datasetZ2, self.wellSpec[i].discriminator);\n                    curveDataZ2 = curveDataZ2.filter((d, idx) => discriminatorCurve[idx]);\n                }\n            }\n            if (shouldPlotZ3 && curveZ3) {\n                datasetZ3 = well.datasets.find(ds => ds.idDataset === self.wellSpec[i].z3Axis.idDataset);\n                self.zSymbols = zSymbolsFn(self.getZ3N(), curveZ3.idCurve);\n                curveDataZ3 = await wiApi.getCachedCurveDataPromise(curveZ3.idCurve);\n                if (self.hasDiscriminator(well)) {\n                    let discriminatorCurve = await wiApi.evalDiscriminatorPromise(datasetZ3, self.wellSpec[i].discriminator);\n                    curveDataZ3 = curveDataZ3.filter((d, idx) => discriminatorCurve[idx]);\n                }\n            }\n\n            curveDataX = curveDataX\n                .map(d => ({\n                    ...d,\n                    depth: datasetStepX > 0 ? (datasetTopX + d.y * datasetStepX) : d.y\n                }));\n            let pointset = getPointSet(curveDataX, curveDataY, curveDataZ1, curveDataZ2, curveDataZ3);\n            pointset = pointset.filter(ps => {\n                return _.isFinite(ps.x) && _.isFinite(ps.y)\n                    && (!shouldPlotZ1 || _.isFinite(ps.z1))\n                    && (!shouldPlotZ2 || _.isFinite(ps.z2))\n                    && (!shouldPlotZ3 || _.isFinite(ps.z3));\n            })\n\n            let zones = zoneset.zones.filter(zone => {\n                let z = self.zoneTree.find(z1 => {\n                    return z1.zone_template.name === zone.zone_template.name;\n                });\n                zone._notUsed = z._notUsed;\n                return true;\n            });\n\n            if (self.getColorMode() == 'zone') {\n                for (let j = 0; j < zones.length; j++) {\n                    let zone = zones[j];\n                    let dataArray = filterData(pointset, zone);\n                    let layer = {\n                        dataX: dataArray.map(d => d.x),\n                        dataY: dataArray.map(d => d.y),\n                        dataZ1: dataArray.map(d => d.z1),\n                        dataZ2: dataArray.map(d => d.z2),\n                        dataZ3: dataArray.map(d => d.z3),\n                        regColor: self.getColor(zone, well),\n                        layerColor: self.getColor(zone, well),\n                        name: `${well.name}.${zone.zone_template.name}`,\n                        zone: zone.zone_template.name,\n                        curveXInfo: `${datasetX.name}.${curveX.name}`,\n                        curveYInfo: `${datasetY.name}.${curveY.name}`,\n                        curveZ1Info: shouldPlotZ1 ? `${datasetZ1.name}.${curveZ1.name}` : 'N/A',\n                        curveZ2Info: shouldPlotZ2 ? `${datasetZ2.name}.${curveZ2.name}` : 'N/A',\n                        curveZ3Info: shouldPlotZ3 ? `${datasetZ3.name}.${curveZ3.name}` : 'N/A',\n                        numPoints: dataArray.length,\n                        correlation: self.calcCorrelation(dataArray.map(d => d.x), dataArray.map(d => d.y))\n                    }\n                    layer.color = curveZ1 && shouldPlotZ1 ? (function(data, idx) {\n                        return getTransformZ1()(this.dataZ1[idx]);\n                    }).bind(layer) : self.getColor(zone, well);\n                    layer.size = (function(data, idx) {\n                        if (curveZ2 && shouldPlotZ2) {\n                            return getTransformZ2()(this.dataZ2[idx]);\n                        } else {\n                            return self.pointSize;\n                        }\n                    }).bind(layer);\n                    layer.textSymbol = curveZ3 && shouldPlotZ3 ? (function(data, idx) {\n                        return getTransformZ3()(this.dataZ3[idx]);\n                    }).bind(layer) : null;\n                    $timeout(() => {\n                        if (!zone._notUsed) {\n                            layers.push(layer);\n                        } else {\n                            _notUsedLayer.push(layer)\n                        }\n                    })\n                }\n            } else {\n                for (let j = 0; j < zones.length; j++) {\n                    let zone = zone[j];\n                    let layer = {\n                        dataX: pointset.map(d => d.x),\n                        dataY: pointset.map(d => d.y),\n                        dataZ1: pointset.map(d => d.z1),\n                        dataZ2: pointset.map(d => d.z2),\n                        dataZ3: pointset.map(d => d.z3),\n                        regColor: well.color,\n                        layerColor: well.color,\n                        name: `${well.name}.${zone.zone_template.name}`,\n                        zone: zone.zone_template.name,\n                        curveXInfo: `${datasetX.name}.${curveX.name}`,\n                        curveYInfo: `${datasetY.name}.${curveY.name}`,\n                        curveZ1Info: shouldPlotZ1 ? `${datasetZ1.name}.${curveZ1.name}` : 'N/A',\n                        curveZ2Info: shouldPlotZ2 ? `${datasetZ2.name}.${curveZ2.name}` : 'N/A',\n                        curveZ3Info: shouldPlotZ3 ? `${datasetZ3.name}.${curveZ3.name}` : 'N/A',\n                        numPoints: pointset.length,\n                        correlation: self.calcCorrelation(dataArray.map(d => d.x), dataArray.map(d => d.y))\n                    }\n                    layer.color = curveZ1 && shouldPlotZ1 ? (function(data, idx) {\n                        return getTransformZ1()(this.dataZ1[idx]);\n                    }).bind(layer) : well.color;\n                    layer.size = (function(data, idx) {\n                        if (curveZ2 && shouldPlotZ2) {\n                            return getTransformZ2()(this.dataZ2[idx]);\n                        } else {\n                            return self.pointSize;\n                        }\n                    }).bind(layer);\n                    layer.textSymbol = curveZ3 && shouldPlotZ3 ? (function(data, idx) {\n                        return getTransformZ3()(this.dataZ3[idx]);\n                    }).bind(layer) : null;\n                    $timeout(() => {\n                        if (!zone._notUsed) {\n                            layers.push(layer);\n                        } else {\n                            _notUsedLayer.push(layer)\n                        }\n                    })\n                }\n            }\n        }\n\n        self.udls.forEach(udl => {\n            setUDLFn(udl);\n        })\n        if (self.getLogaX() && self.getLogaY()) {\n            self.pickettLines = self.pickettLines || [{family: 'pickett', label: 'Sw = 1', sw: 1, ...self.pickettParams}];\n        }\n        wiLoading.hide();\n        self.layers = layers;\n        self._notUsedLayer = _notUsedLayer;\n    }\n    function getPointSet(xData, yData, z1Data, z2Data, z3Data) {\n        let pointset = [];\n        xData.forEach((eX, idx) => {\n            pointset.push({\n                x: eX.x,\n                y: yData[idx].x,\n                z1: z1Data ? z1Data[idx].x : undefined,\n                z2: z2Data ? z2Data[idx].x : undefined,\n                z3: z3Data ? z3Data[idx].x : undefined,\n                depth: eX.depth\n            })\n        })\n        return pointset;\n    }\n    function getTransformZ1() {\n        let wdZ = [self.getZ1Min(), self.getZ1Max()];\n        let reverse = wdZ[0] > wdZ[1];\n        return d3.scaleQuantize()\n            .domain(sort(wdZ))\n            .range(reverse ? clone(self.zColors).reverse() : self.zColors);\n    }\n    function getTransformZ2() {\n        let wdZ = [self.getZ2Min(), self.getZ2Max()];\n        let reverse = wdZ[0] > wdZ[1];\n        return d3.scaleQuantize()\n            .domain(sort(wdZ))\n            .range(reverse ? clone(self.zSizes).reverse() : self.zSizes);\n    }\n    function getTransformZ3() {\n        let wdZ = [self.getZ3Min(), self.getZ3Max()];\n        let reverse = wdZ[0] > wdZ[1];\n        return d3.scaleQuantize()\n            .domain(sort(wdZ))\n            .range(reverse ? clone(self.zSymbols).reverse() : self.zSymbols);\n    }\n    function zColorsFn(numColor, doHaveColorAxis) {\n        if (!doHaveColorAxis) return [];\n        if (numColor <= 0) return [];\n        let colors = [];\n        if (numColor == 1) return ['rgb(255, 0, 0)'];\n        let rotateTime = Math.round(numColor / 3);\n        let redPoints = points(numColor);\n        let greenPoints = angular.copy(redPoints).rotate(rotateTime);\n        let bluePoints = angular.copy(greenPoints).rotate(rotateTime);\n        for (let i = 0; i < numColor; i++) {\n            colors.push('rgb(' + redPoints[i] + ',' + greenPoints[i] + ',' + bluePoints[i] + ')');\n        }\n        return colors;\n    }\n    function zSizesFn(numSize, doHaveSizeAxis) {\n        if (!doHaveSizeAxis) return [];\n        if (numSize <= 0) return [];\n        const minSize = 5;\n        const step = 2;\n        let sizes = []\n        for (let i = 0; i < numSize; i++) {\n            sizes.push(minSize + i * step);\n        }\n        return sizes;\n    }\n    function zSymbolsFn(numSymbol, doHaveSymbolAxis) {\n        if (!doHaveSymbolAxis) return [];\n        if (numSymbol <= 0) return [];\n        const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        let symbols = []\n        for (let i = 0; i < numSymbol; i++) {\n            symbols.push(alphabet[i]);\n        }\n        return symbols;\n    }\n    function points(N) {\n        let toRet = [];\n        let step = (255 - 0) / (N - 1);\n        for (let i = 0; i < N; i++) {\n            toRet.push(0 + i * step);\n        }\n        return toRet;\n    }\n    function sort(array) {\n        return array.sort(function(a, b) {                                          \n            return a - b;                                                           \n        });                                                                         \n    }\n    function clone(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    if (!Array.prototype.rotate) {\n        Object.defineProperty(Array.prototype, 'rotate', {\n            enumerable: false,\n            value: function (count) {\n                var push = Array.prototype.push,\n                    splice = Array.prototype.splice;\n                var len = this.length >>> 0, // convert to uint\n                    count = count >> 0; // convert to int\n\n                // convert count to value in range [0, len)\n                count = ((count % len) + len) % len;\n\n                // use splice.call() instead of this.splice() to make function generic\n                push.apply(this, splice.call(this, 0, count));\n                return this;\n            }\n        });\n    }\n    this.hideSelectedLayer = function() {\n        if(!self.selectedLayers) return;                                        \n        self.selectedLayers.forEach(layer => layer._notUsed = true);            \n    }                                                                           \n    this.showSelectedLayer = function() {                                       \n        if(!self.selectedLayers) return;                                        \n        self.selectedLayers.forEach(layer => layer._notUsed = false);           \n        $timeout(() => {});                                                     \n    }                                                                           \n    this.hideAllLayer = function() {                                            \n        self.layers.forEach(bins => bins._notUsed = true);               \n        $timeout(() => {});                                                     \n    }                                                                           \n    this.showAllLayer = function() {                                            \n        self.layers.forEach(bins => bins._notUsed = false);              \n        $timeout(() => {});                                                     \n    }\n    this.getFilterForLayer = () => {\n        if (!self.zoneTree || !self.zoneTree.length) {\n            return '';\n        }\n        let filterLayer = self.zoneTree.map(z => `${z._notUsed}`).join('');\n        return filterLayer;\n    }\n    this.runLayerMatch = function (node, criteria) {\n        let keySearch = criteria.toLowerCase();\n        let searchArray = node.name.toLowerCase();\n        return searchArray.includes(keySearch);\n    }\n    let _layerTree = [];\n    this.getLayerTree = function() {\n        _layerTree = self.layers\n        return self.layers;\n    }\n    this.getLayerLabel = (node) => node.name\n    this.getLayerIcon = (node) => ( (node && !node._notUsed) ? 'layer-16x16': 'fa fa-eye-slash' )\n    this.getLayerIcons = (node) => ( [\"rectangle\"] )\n    this.getLayerIconStyle = (node) => ( {\n        'background-color': node.layerColor\n    })\n    this.click2ToggleLayer = function ($event, node, selectedObjs) {\n        node._notUsed = !node._notUsed;\n        self.selectedLayers = Object.values(selectedObjs).map(o => o.data);\n    }\n\n    // ---REGRESSION---\n    function getRegressionTypeList() {\n        self.regressionTypeList = [{\n            data: {label: 'Linear'},\n            properties: {name: 'Linear'}\n        }, {\n            data: {label: 'Exponential'},\n            properties: {name: 'Exponential'}\n        }, {\n            data: {label: 'Power'},\n            properties: {name: 'Power'}\n        }]\n    }\n    this.onRegressionTypeChange = function(selectedItemProps) {\n        self.regressionType = (selectedItemProps || {}).name;\n    }\n    this.getRegIcon = (node) => ( (node && node._useReg) ? 'layer-16x16': 'fa fa-eye-slash' )\n    this.getRegIcons = (node) => ( [\"rectangle\"] )\n    this.getRegIconStyle = (node) => ( {\n        'background-color': node.regColor\n    })\n    this.updateRegressionLine = function(node, regressionType, polygons) {\n        let data = [];\n        for (let i = 0; i < self.layers.length; i++) {\n            let layer = self.layers[i];\n            if (layer._useReg) {\n                data = data.concat(layer.dataX.map((x, i) => {\n                    return [x, layer.dataY[i]];\n                }));\n            }\n        }\n        let usedPolygon = polygons.filter(p => {\n            return !_.isEmpty(p.points) && !p._notUsed;\n        })\n        if (usedPolygon.length) {\n            data = self.filterByPolygons(usedPolygon, data, self.polygonExclude);\n        }\n        if (!data.length) {\n            self.regLine.family = undefined;\n            return;\n        }\n        let result;\n        switch(regressionType) {\n            case 'Linear':\n                result = regression.linear(data, {precision: 6});\n                self.regLine = {\n                    ...self.regLine,\n                    family: self.regressionType.toLowerCase(), \n                    slope: result.equation[0], \n                    intercept: result.equation[1],\n                    predict: result.predict,\n                    r2: result.r2\n                };\n                break;\n            case 'Exponential':\n                result = regression.exponential(data, {precision: 6});\n                self.regLine = {\n                    ...self.regLine,\n                    family: self.regressionType.toLowerCase(), \n                    ae: result.equation[0], \n                    b: result.equation[1],\n                    predict: result.predict,\n                    r2: result.r2\n                };\n                break;\n            case 'Power':\n                result = regression.power(data, {precision: 6});\n                self.regLine = {\n                    ...self.regLine,\n                    family: self.regressionType.toLowerCase(), \n                    coefficient: result.equation[0], \n                    exponent: result.equation[1],\n                    predict: result.predict,\n                    r2: result.r2\n                };\n                break;\n        }\n        // Calc MSE\n        let x = [];\n        let y = [];\n        for (let i = 0; i < self.layers.length; i++) {\n            let layer = self.layers[i];\n            if (layer._useReg) {\n                x = x.concat(layer.dataX);\n                y = y.concat(layer.dataY);\n            }\n        }\n        x = x.map(xi => {\n            return self.regLine.predict(xi)[1];\n        });\n        self.mse = {\n            family: 'mse',\n            mse: self.calcMSE(y, x).toFixed(6)\n        }\n    }\n    this.click2ToggleRegression = function ($event, node, selectedObjs) {\n        node._useReg = !node._useReg;\n        self.updateRegressionLine(node, self.regressionType, self.polygons);\n        $timeout(() => {\n            self.regLine = {\n                ...self.regLine,\n                lineStyle: [10, 0],\n                lineColor: self.regLine.lineColor ? self.regLine.lineColor : colorGenerator(),\n                lineWidth: 1\n            };\n        })\n    }\n\n    //---DISCRIMINATOR---\n    this.discriminatorDialog = function(well) {\n        let wSpec = getWellSpec(well);\n        let dataset = well.datasets.find(ds => ds.idDataset === wSpec['xAxis'].idDataset);\n\n        let curvesArr = dataset.curves.map( c => ({type:'curve',name:c.name}) );\n        wiDialog.discriminator(wSpec.discriminator, curvesArr, function(discrmnt) {\n            wSpec.discriminator = discrmnt;\n        });\n    }                                                                           \n    this.hasDiscriminator = function(well) {\n        let wSpec = getWellSpec(well);\n        return wSpec.discriminator && Object.keys(wSpec.discriminator).length > 0 && wSpec.discriminator.active;\n    }\n\n    this.reverseAxis = function() {\n        [self.selectionValueList[0].value, self.selectionValueList[1].value] = [self.selectionValueList[1].value, self.selectionValueList[0].value];\n        for (let i = 0; i < self.wellSpec.length; i++) {\n            swapPropObj(self.wellSpec[i], 'xAxis', 'yAxis');\n        }\n        updateDefaultConfig();\n        [self.config.left, self.config.bottom] = [self.config.bottom, self.config.left];\n        [self.config.right, self.config.top] = [self.config.top, self.config.right];\n        [self.config.logaX, self.config.logaY] = [self.config.logaY, self.config.logaX];\n        [self.config.majorX, self.config.majorY] = [self.config.majorY, self.config.majorX];\n        [self.config.minorX, self.config.minorY] = [self.config.minorY, self.config.minorX];\n        [self.config.xLabel, self.config.yLabel] = [self.config.yLabel, self.config.xLabel];\n        self.genLayers();\n    }\n    function swapPropObj(obj, key1, key2) {\n        [obj[key1], obj[key2]] = [obj[key2], obj[key1]];\n    }\n\n    function colorGenerator() {\n        let rand = function () {\n            return Math.floor(Math.random() * 255);\n        }\n        return \"rgb(\" + rand() + \",\" + rand() + \",\" + rand() + \")\";\n    }\n\n    this.addPickettLine = function() {\n        if (!self.pickettLines) self.pickettLines = [];\n        if (self.pickettLines.length >= _PICKETT_LIMIT) return;\n        self.pickettLines.push({\n            family: 'pickett',\n            label: 'Sw = 1',\n            sw: 1,\n            ...self.pickettParams\n        })\n    }\n    this.removePickett = ($index) => {\n        self.pickettLines.splice($index, 1);\n    }\n\n    this.conditionForPickettPlot = conditionForPickettPlot;\n    function conditionForPickettPlot() {\n        let familyGroupX;\n        let familyGroupY;\n        if (!self.treeConfig.length) {\n            familyGroupX = undefined;\n        } else {\n            let curveX = self.getCurve(self.treeConfig[0], 'xAxis');\n            familyGroupX = wiApi.getFamily(curveX.idFamily).familyGroup;\n            let curveY = self.getCurve(self.treeConfig[0], 'yAxis');\n            familyGroupY = wiApi.getFamily(curveY.idFamily).familyGroup;\n        }\n        return self.getLogaX() && self.getLogaY()\n            && ((familyGroupX == 'Porosity' && familyGroupY == 'Resistivity')\n                || (familyGroupX == 'Resistivity' && familyGroupY == 'Porosity'))\n    }\n}\n\n\n//# sourceURL=webpack:///./multi-well-crossplot/index.js?");

/***/ }),

/***/ "./multi-well-crossplot/style.less":
/*!*****************************************!*\
  !*** ./multi-well-crossplot/style.less ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/less-loader/dist/cjs.js!./style.less */ \"../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-well-crossplot/style.less\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ \"../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack:///./multi-well-crossplot/style.less?");

/***/ }),

/***/ "./multi-well-crossplot/template.html":
/*!********************************************!*\
  !*** ./multi-well-crossplot/template.html ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = \"<div class=\\\"main\\\">\\n\\n    <div class=\\\"main-body\\\">\\n        \" + __webpack_require__(/*! ./fragments/main-area.html */ \"./multi-well-crossplot/fragments/main-area.html\") + \"\\n    </div>\\n    <wi-droppable style=\\\"display:flex;\\\" on-drop=\\\"self.onDrop\\\"\\n        container-style=\\\"{}\\\">\\n        <div style=\\\" height: 100%; right: 0; border-left: 1px solid #ccc; box-shadow: 0 0 20px #0000001c;\\\">\\n            \" + __webpack_require__(/*! ./fragments/side-bar.html */ \"./multi-well-crossplot/fragments/side-bar.html\") + \"\\n        </div>\\n    </wi-droppable>\\n</div>\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/template.html?");

/***/ })

/******/ });